<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classhyperion_1_1utils_1_1Error" kind="class" language="C++" prot="public">
    <compoundname>hyperion::utils::Error</compoundname>
    <derivedcompoundref refid="classhyperion_1_1utils_1_1LockFreeQueueError" prot="public" virt="non-virtual">hyperion::utils::LockFreeQueueError</derivedcompoundref>
    <derivedcompoundref refid="classhyperion_1_1utils_1_1LoggerError" prot="public" virt="non-virtual">hyperion::utils::LoggerError</derivedcompoundref>
    <derivedcompoundref refid="classhyperion_1_1utils_1_1LoggerInitError" prot="public" virt="non-virtual">hyperion::utils::LoggerInitError</derivedcompoundref>
    <includes refid="Error_8h" local="no">Error.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1Error_1ac1d91377bc8920e3f1c5b6b28289ebc7" prot="protected" static="no" mutable="no">
        <type>std::error_code</type>
        <definition>std::error_code hyperion::utils::Error::m_error_code</definition>
        <argsstring></argsstring>
        <name>m_error_code</name>
        <initializer>= std::error_code()</initializer>
        <briefdescription>
<para>error code </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="202" column="17" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1Error_1a577e2b93fd0bcc296fb0222dfd108d08" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Error&gt; hyperion::utils::Error::m_source</definition>
        <argsstring></argsstring>
        <name>m_source</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the source <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> of this one We use <computeroutput>std::shared_ptr</computeroutput> instead of <computeroutput>std::unique_ptr</computeroutput> so we can be copyable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="205" column="17" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1Error_1a293d07198b11b188d576ea22af24ea63" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hyperion::utils::Error::m_message</definition>
        <argsstring></argsstring>
        <name>m_message</name>
        <briefdescription>
<para>the error message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="207" column="13" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1Error_1ab167d672a5ad56f1f9fd4ba529486982" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hyperion::utils::Error::m_has_error_code</definition>
        <argsstring></argsstring>
        <name>m_has_error_code</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>whether this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> originated from a <computeroutput>std::error_code</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="209" column="6" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1Error_1a137a953409f0acb90eb1cddf5d35e191" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hyperion::utils::Error::m_has_source</definition>
        <argsstring></argsstring>
        <name>m_has_source</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>whether this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> has a source <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="211" column="6" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a0c1928d6a82b1c14bf4aa81147bc85ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Error</name>
        <briefdescription>
<para>Constructs a default <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with no message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a6574446f8b411b1037ad136da235f175" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const std::error_code &amp;code) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const std::error_code &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> from the given <computeroutput>std::error_code</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="35" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1aa7e71f36d303addc3c29a4ef6816011e" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const char(message)[N]) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const </type>
          <declname>char</declname>
          <array>(message)[N]</array>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="43" column="10" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="43" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1aeeb1da8b8c587c116982c54cf3ca7763" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const std::string &amp;message) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="49" column="10" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="49" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a3c0805a6120d60f5b7e0a902ffcb836e" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(std::string &amp;&amp;message) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="55" column="10" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a6c55f4e4979d85cf13aceb10a3ca2915" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const char(message)[N], gsl::owner&lt; Error * &gt; source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const </type>
          <declname>char</declname>
          <array>(message)[N]</array>
        </param>
        <param>
          <type>gsl::owner&lt; <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> * &gt;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. Takes ownership of <computeroutput>source</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="65" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a9ce78c08691aef5d63deb833063eba52" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const std::string &amp;message, gsl::owner&lt; Error * &gt; source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>gsl::owner&lt; <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> * &gt;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. Takes ownership of <computeroutput>source</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="74" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a163baab73647962a77d1d01050bdc282" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(std::string &amp;&amp;message, gsl::owner&lt; Error * &gt; source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>gsl::owner&lt; <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> * &gt;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. Takes ownership of <computeroutput>source</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="83" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a98369fa06053ddf8876848f9190389d8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const char(message)[N], const Error &amp;source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const </type>
          <declname>char</declname>
          <array>(message)[N]</array>
        </param>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="92" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a5ed93330bfb82ff37db0cb3e993ec032" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const std::string &amp;message, const Error &amp;source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="100" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1aad49420d32b264f4b1cc0926502f6cad" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(std::string &amp;&amp;message, const Error &amp;source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="108" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a070028253e1de5896b606ed4c62e45e5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const char(message)[N], Error &amp;&amp;source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const </type>
          <declname>char</declname>
          <array>(message)[N]</array>
        </param>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;&amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="118" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1ab7b26f052e655b907eedeefa6cffa770" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const std::string &amp;message, Error &amp;&amp;source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;&amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="127" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a577add64188d4e98c46cc982fdcfc20d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(std::string &amp;&amp;message, Error &amp;&amp;source) noexcept</argsstring>
        <name>Error</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;&amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Constructs an <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> with the given message and source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>- The error message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>- The source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="136" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1adc8f73ec7c9e8addadf23f7d0a775d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(const Error &amp;error)=default</argsstring>
        <name>Error</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a3c3d7f4749a889870fb1f58fbb4118c7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Error::Error</definition>
        <argsstring>(Error &amp;&amp;error) noexcept=default</argsstring>
        <name>Error</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;&amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1ac86668974efceb9470591299567bd39b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>virtual hyperion::utils::Error::~Error</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~Error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="144" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a0f18fc60eb9ad36f4715bd6b6b27e044" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto hyperion::utils::Error::source</definition>
        <argsstring>() const noexcept -&gt; const std::weak_ptr&lt; Error &gt;</argsstring>
        <name>source</name>
        <briefdescription>
<para>Returns the source/cause <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> of this error if there is one, passing ownership to the containing <computeroutput><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>sourceError, if there is one, or nullptr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="150" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a039580244e361f37378071a48d9b5149" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Error::has_std_error_code</definition>
        <argsstring>() const noexcept -&gt; bool</argsstring>
        <name>has_std_error_code</name>
        <briefdescription>
<para>Returns whether this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> resulted from a <computeroutput>std::error_code</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if this originated from a <computeroutput>std::error_code</computeroutput>, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="157" column="17" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a25b8c5621ead053b144e267658c806da" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto hyperion::utils::Error::error_code</definition>
        <argsstring>() const noexcept -&gt; const std::error_code</argsstring>
        <name>error_code</name>
        <briefdescription>
<para>Returns the <computeroutput>std::error_code</computeroutput> associated with this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The associated <computeroutput>std::error_code</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="164" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1aa8599542852da0e3b118a8e519b2eb71" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto hyperion::utils::Error::message</definition>
        <argsstring>() const noexcept -&gt; std::string</argsstring>
        <name>message</name>
        <briefdescription>
<para>Returns the error message for this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The error message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="171" column="14" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a00ae7cf3f1a43ffa27c86a5d7eebc4ff" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto hyperion::utils::Error::message_as_cstr</definition>
        <argsstring>() const noexcept -&gt; const char *</argsstring>
        <name>message_as_cstr</name>
        <briefdescription>
<para>Returns the error message for this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The error message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="178" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1ac7afb7822c66fb288cfb069114bfe09b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto hyperion::utils::Error::to_string</definition>
        <argsstring>() const noexcept -&gt; std::string</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>Converts this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> to a <computeroutput>std::string</computeroutput> Generally implemented by combining the <computeroutput>source</computeroutput>&apos;s <computeroutput>to_std_string</computeroutput> and this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput>&apos;s <computeroutput>message</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>this <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> formatted as a <computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="187" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="187" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1a77c96c5c7af0a0e041e73768468a9aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto hyperion::utils::Error::operator=</definition>
        <argsstring>(const Error &amp;error) -&gt; Error &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="197" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Error_1aef1fc8b0fd61d1d9c6dd529021842902" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto hyperion::utils::Error::operator=</definition>
        <argsstring>(Error &amp;&amp;error) noexcept -&gt; Error &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> &amp;&amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="198" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base error interface. Used to implement custom error types used as the <computeroutput>E</computeroutput> in <computeroutput><ref refid="classhyperion_1_1utils_1_1Result" kindref="compound">Result</ref>&lt;T, E&gt;</computeroutput> to represent and communicate failure of a function. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1Result" kindref="compound">Result</ref>&lt;T, E&gt;</computeroutput> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>hyperion::utils::LoggerInitError</label>
        <link refid="classhyperion_1_1utils_1_1LoggerInitError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>hyperion::utils::LoggerError</label>
        <link refid="classhyperion_1_1utils_1_1LoggerError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hyperion::utils::LockFreeQueueError</label>
        <link refid="classhyperion_1_1utils_1_1LockFreeQueueError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hyperion::utils::Error</label>
        <link refid="classhyperion_1_1utils_1_1Error"/>
      </node>
    </inheritancegraph>
    <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" line="27" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Error.h" bodystart="27" bodyend="212"/>
    <listofallmembers>
      <member refid="classhyperion_1_1utils_1_1Error_1a0c1928d6a82b1c14bf4aa81147bc85ed" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a6574446f8b411b1037ad136da235f175" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1aa7e71f36d303addc3c29a4ef6816011e" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1aeeb1da8b8c587c116982c54cf3ca7763" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a3c0805a6120d60f5b7e0a902ffcb836e" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a6c55f4e4979d85cf13aceb10a3ca2915" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a9ce78c08691aef5d63deb833063eba52" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a163baab73647962a77d1d01050bdc282" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a98369fa06053ddf8876848f9190389d8" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a5ed93330bfb82ff37db0cb3e993ec032" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1aad49420d32b264f4b1cc0926502f6cad" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a070028253e1de5896b606ed4c62e45e5" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1ab7b26f052e655b907eedeefa6cffa770" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a577add64188d4e98c46cc982fdcfc20d" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1adc8f73ec7c9e8addadf23f7d0a775d42" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a3c3d7f4749a889870fb1f58fbb4118c7" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>Error</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a25b8c5621ead053b144e267658c806da" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>error_code</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a039580244e361f37378071a48d9b5149" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>has_std_error_code</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1ac1d91377bc8920e3f1c5b6b28289ebc7" prot="protected" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>m_error_code</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1ab167d672a5ad56f1f9fd4ba529486982" prot="protected" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>m_has_error_code</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a137a953409f0acb90eb1cddf5d35e191" prot="protected" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>m_has_source</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a293d07198b11b188d576ea22af24ea63" prot="protected" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>m_message</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a577e2b93fd0bcc296fb0222dfd108d08" prot="protected" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>m_source</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1aa8599542852da0e3b118a8e519b2eb71" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>message</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a00ae7cf3f1a43ffa27c86a5d7eebc4ff" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>message_as_cstr</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a77c96c5c7af0a0e041e73768468a9aac" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1aef1fc8b0fd61d1d9c6dd529021842902" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1a0f18fc60eb9ad36f4715bd6b6b27e044" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>source</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1ac7afb7822c66fb288cfb069114bfe09b" prot="public" virt="non-virtual"><scope>hyperion::utils::Error</scope><name>to_string</name></member>
      <member refid="classhyperion_1_1utils_1_1Error_1ac86668974efceb9470591299567bd39b" prot="public" virt="virtual"><scope>hyperion::utils::Error</scope><name>~Error</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
