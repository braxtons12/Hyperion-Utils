<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classhyperion_1_1utils_1_1RingBuffer" kind="class" language="C++" prot="public">
    <compoundname>hyperion::utils::RingBuffer</compoundname>
    <includes refid="RingBuffer_8h" local="no">RingBuffer.h</includes>
    <innerclass refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" prot="public">hyperion::utils::RingBuffer::ConstIterator</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" prot="public">hyperion::utils::RingBuffer::Iterator</innerclass>
    <templateparamlist>
      <param>
        <type>DefaultConstructible</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type><ref refid="namespacehyperion_1_1utils_1a508d26e9db0ca87f0be70018e5c240fd" kindref="member">RingBufferType</ref></type>
        <declname>ThreadSafety</declname>
        <defname>ThreadSafety</defname>
        <defval>RingBufferType::NotThreadSafe</defval>
      </param>
      <param>
        <type>template&lt; typename ElementType &gt; typename</type>
        <declname>Allocator</declname>
        <defname>Allocator</defname>
        <defval>std::allocator</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_1a56a142595a9c8d760bccead76a89059d" prot="public" static="no">
        <type>std::allocator_traits&lt; Allocator&lt; T &gt; &gt;</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::allocator_traits =  std::allocator_traits&lt;Allocator&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>allocator_traits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="64" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_1ad5489ea17a1dfdf19d1237cacdcdfff1" prot="public" static="no">
        <type>decltype(allocate_unique&lt; T[]&gt;(std::declval&lt; Allocator&lt; T[]&gt; &gt;(), <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a35516f4535f8928ccbc0843e2c1b28f5" kindref="member">DEFAULT_CAPACITY</ref>))</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::unique_pointer =  decltype(allocate_unique&lt;T[]&gt;(std::declval&lt;Allocator&lt;T[]&gt; &gt;(), DEFAULT_CAPACITY))</definition>
        <argsstring></argsstring>
        <name>unique_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="65" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1a35516f4535f8928ccbc0843e2c1b28f5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const usize</type>
        <definition>constexpr const usize hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::DEFAULT_CAPACITY</definition>
        <argsstring></argsstring>
        <name>DEFAULT_CAPACITY</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>Default capacity of <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="63" column="30" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1ad51cc68e07bebb98b32da61943cd14ff" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const usize</type>
        <definition>constexpr const usize hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::DEFAULT_CAPACITY_INTERNAL</definition>
        <argsstring></argsstring>
        <name>DEFAULT_CAPACITY_INTERNAL</name>
        <initializer>= <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a35516f4535f8928ccbc0843e2c1b28f5" kindref="member">DEFAULT_CAPACITY</ref> + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="878" column="30" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="878" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1ad62169d34da656af913c31d7651101da" prot="private" static="no" mutable="no">
        <type>Allocator&lt; T &gt;</type>
        <definition>Allocator&lt;T&gt; hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::m_allocator</definition>
        <argsstring></argsstring>
        <name>m_allocator</name>
        <initializer>= Allocator&lt;T&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="879" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1a094110dd6f595978e42a81d0681af803" prot="private" static="no" mutable="no">
        <type>unique_pointer</type>
        <definition>unique_pointer hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::m_buffer</definition>
        <argsstring></argsstring>
        <name>m_buffer</name>
        <initializer>= allocate_unique&lt;T[]&gt;(m_allocator, DEFAULT_CAPACITY_INTERNAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="880" column="16" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1a5492e0f376f16783aed5a7d999f08596" prot="private" static="no" mutable="no">
        <type>usize</type>
        <definition>usize hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::m_write_index</definition>
        <argsstring></argsstring>
        <name>m_write_index</name>
        <initializer>= 0_usize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="882" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1ad15a44315ee8d9798803c1c6962a0815" prot="private" static="no" mutable="no">
        <type>usize</type>
        <definition>usize hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::m_start_index</definition>
        <argsstring></argsstring>
        <name>m_start_index</name>
        <initializer>= 0_usize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="883" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1a814d201c90a134e87f390b869f2d8181" prot="private" static="no" mutable="no">
        <type>usize</type>
        <definition>usize hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::m_loop_index</definition>
        <argsstring></argsstring>
        <name>m_loop_index</name>
        <initializer>= <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a35516f4535f8928ccbc0843e2c1b28f5" kindref="member">DEFAULT_CAPACITY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="884" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1a9648c9d5e84bb40e954877e11f7d6cb8" prot="private" static="no" mutable="no">
        <type>usize</type>
        <definition>usize hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::m_capacity</definition>
        <argsstring></argsstring>
        <name>m_capacity</name>
        <initializer>= DEFAULT_CAPACITY_INTERNAL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="885" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="885" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a8e73273a589e8f9bf9cf1bad3de32d91" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::RingBuffer</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>RingBuffer</name>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> with default capacity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="388" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a4bc4be8c55ba25415dc51d8d5ceca5ab" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::RingBuffer</definition>
        <argsstring>(usize intitial_capacity) noexcept</argsstring>
        <name>RingBuffer</name>
        <param>
          <type>usize</type>
          <declname>intitial_capacity</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> with (at least) the given initial capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intitial_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- The initial capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="393" column="20" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a68e675965f9665739088efbf99e1b525" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::RingBuffer</definition>
        <argsstring>(usize intitial_capacity, const T &amp;default_value) noexcept requires Copyable&lt; T &gt;</argsstring>
        <name>RingBuffer</name>
        <param>
          <type>usize</type>
          <declname>intitial_capacity</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Constructs a new <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> with the given initial capacity and fills it with <computeroutput>default_value</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intitial_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- The initial capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to fill the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="403" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="403" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a2f60eadf894c47c4f498015777f4f965" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::RingBuffer</definition>
        <argsstring>(std::initializer_list&lt; T &gt; values) noexcept requires Copyable&lt; T &gt;</argsstring>
        <name>RingBuffer</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="414" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="414" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1ad20dec426a6be5aac2e9e2a4b3490cc5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::RingBuffer</definition>
        <argsstring>(const RingBuffer &amp;buffer) noexcept requires Copyable&lt; T &gt;</argsstring>
        <name>RingBuffer</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="426" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="426" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a5a7e4ebce308fe97ddc010828466551d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::RingBuffer</definition>
        <argsstring>(RingBuffer &amp;&amp;buffer) noexcept</argsstring>
        <name>RingBuffer</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> &amp;&amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="442" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="442" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1afd55d29322b027a37bd25c9699e1cabf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::~RingBuffer</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~RingBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1ad71d64188ee03762324281b7cdf53479" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::at</definition>
        <argsstring>(Integral auto index) noexcept -&gt; T &amp;</argsstring>
        <name>at</name>
        <param>
          <type>Integral auto</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the element at the given index. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not checked in the same manner as STL containers: if index &gt;= capacity, the element at capacity - 1 is returned.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The index of the desired element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element at the given index, or at capacity - 1 if index &gt;= capacity </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="462" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a516a5fdc004dfba8e7f061334d952257" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::front</definition>
        <argsstring>() noexcept -&gt; T &amp;</argsstring>
        <name>front</name>
        <briefdescription>
<para>Returns the first element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="471" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a8d0178b773ad8c7e86f29c05abb38a07" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::back</definition>
        <argsstring>() noexcept -&gt; T &amp;</argsstring>
        <name>back</name>
        <briefdescription>
<para>Returns the last element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If &lt;= 1 elements are in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, this will be the same as <computeroutput>front</computeroutput></para>
</simplesect>
<simplesect kind="return"><para>The last element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="480" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="480" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a35c14f35c955131f80be11f491da35b2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::data</definition>
        <argsstring>() noexcept -&gt; T *</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns a pointer to the underlying data in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not sorted in any way to match the representation used by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<simplesect kind="return"><para>A pointer to the underlying data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="490" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="490" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a3e3a291f345f069718216bdcd77da0eb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::empty</definition>
        <argsstring>() const noexcept -&gt; bool</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns whether the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> is empty, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="497" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="497" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1ad3d7f9cff7f483bc60375d13eaa524f4" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::full</definition>
        <argsstring>() const noexcept -&gt; bool</argsstring>
        <name>full</name>
        <briefdescription>
<para>Returns whether the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> is full. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> is full, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="504" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="504" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::size</definition>
        <argsstring>() const noexcept -&gt; usize</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the current number of elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current number of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="511" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="511" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a0ee83a219c411bf8620ad8a02705b06e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::max_size</definition>
        <argsstring>() const noexcept -&gt; usize</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Returns the maximum possible number of elements this <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> could store if grown to maximum possible capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The maximum possible number of storable elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="520" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="520" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::capacity</definition>
        <argsstring>() const noexcept -&gt; usize</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Returns the current capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>; the number of elements it can currently store. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current capacity </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="528" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="528" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a8ab29e09e70d671d8152269eb579907e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::reserve</definition>
        <argsstring>(usize new_capacity) noexcept -&gt; void</argsstring>
        <name>reserve</name>
        <param>
          <type>usize</type>
          <declname>new_capacity</declname>
        </param>
        <briefdescription>
<para>Reserves more storage for the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>. If <computeroutput>new_capacity</computeroutput> is &gt; capacity, then the capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> will be extended until at least <computeroutput>new_capacity</computeroutput> elements can be stored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Memory contiguity is maintained, so no <bold>elements</bold> will be lost or invalidated. However, all iterators and references to elements will be invalidated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- The new capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="539" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="539" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1ab4c1b33e8dc7dd3c277b52263dc12ba8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::clear</definition>
        <argsstring>() noexcept -&gt; void</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Erases all elements from the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="555" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="555" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a5a5c7f5747493b7fe309b13179af676f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::push_back</definition>
        <argsstring>(const T &amp;value) noexcept -&gt; void requires Copyable&lt; T &gt;</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> then this loops and overwrites <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1a516a5fdc004dfba8e7f061334d952257" kindref="member">front()</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- the element to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="564" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="564" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a69a4852fd8ee7e2dff747450750b0970" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::push_back</definition>
        <argsstring>(T &amp;&amp;value) noexcept -&gt; void</argsstring>
        <name>push_back</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> then this loops and overwrites <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1a516a5fdc004dfba8e7f061334d952257" kindref="member">front()</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- the element to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="576" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="576" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a7d9b545813a3db368f3a81ed395ad81b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::emplace_back</definition>
        <argsstring>(Args &amp;&amp;... args) noexcept -&gt; T &amp;</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element in place at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> then this loops and overwrites <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1a516a5fdc004dfba8e7f061334d952257" kindref="member">front()</ref></computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The types of the element&apos;s constructor arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The constructor arguments for the element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the element constructed at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="593" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="593" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1ac0d35f01696149fe04d4a7efff065cf9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::emplace</definition>
        <argsstring>(const Iterator &amp;position, Args &amp;&amp;... args) noexcept -&gt; T &amp;</argsstring>
        <name>emplace</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element in place at the location indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The types of the element&apos;s constructor arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to construct the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The constructor arguments for the element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the element constructed at the location indicated by <computeroutput>position</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="615" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="615" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a3224c979ea66ccdd9afd600cb0c42e13" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::emplace</definition>
        <argsstring>(const ConstIterator &amp;position, Args &amp;&amp;... args) noexcept -&gt; T &amp;</argsstring>
        <name>emplace</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element in place at the location indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The types of the element&apos;s constructor arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to construct the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The constructor arguments for the element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the element constructed at the location indicated by <computeroutput>position</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="636" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="636" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a37567a98f558c0a9fc94c10e0ea4cd98" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert</definition>
        <argsstring>(const Iterator &amp;position, const T &amp;element) noexcept -&gt; void requires Copyable&lt; T &gt;</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Assigns the given element to the position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="653" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="653" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a0f738f72d4f2b4f2a11af9a7bbb6693b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert</definition>
        <argsstring>(const Iterator &amp;position, T &amp;&amp;element) noexcept -&gt; void</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Assigns the given element to the position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="663" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="663" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a15c738063a5e758691206375567e7918" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert</definition>
        <argsstring>(const ConstIterator &amp;position, const T &amp;element) noexcept -&gt; void requires Copyable&lt; T &gt;</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Assigns the given element to the position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="674" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="674" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a174b57d0dbc1fba8503dc595ce5c5857" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert</definition>
        <argsstring>(const ConstIterator &amp;position, T &amp;&amp;element) noexcept -&gt; void</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Assigns the given element to the position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="686" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="686" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a897e82176029ff4ddb06ae2cbcb612e2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert_emplace</definition>
        <argsstring>(const Iterator &amp;position, Args &amp;&amp;... args) noexcept -&gt; T &amp;</argsstring>
        <name>insert_emplace</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element at the insertion position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments to the constructor for the element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="701" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="701" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1abb24c94637974a594eff5b4d8067772c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert_emplace</definition>
        <argsstring>(const ConstIterator &amp;position, Args &amp;&amp;... args) noexcept -&gt; T &amp;</argsstring>
        <name>insert_emplace</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element at the insertion position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments to the constructor for the element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="716" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="716" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a5cf498eaa79cd97d04b7fba6ee5f156c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::erase</definition>
        <argsstring>(const Iterator &amp;position) noexcept -&gt; Iterator</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Erases the element at the given <computeroutput>position</computeroutput>, moving other elements backward in the buffer to maintain contiguity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to erase</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="726" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="726" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a9acd7eade2fb0013f204129dd06205fb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::erase</definition>
        <argsstring>(const ConstIterator &amp;position) noexcept -&gt; Iterator</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Erases the element at the given <computeroutput>position</computeroutput>, moving other elements backward in the buffer to maintain contiguity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to erase</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="736" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="736" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a3c19d9b2c48e88d40b3e33312acef83c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::erase</definition>
        <argsstring>(const Iterator &amp;first, const Iterator &amp;last) noexcept -&gt; Iterator</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Erases the range of elements in [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>) Returns an <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> to the element after the last one erased. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In the case <computeroutput>first</computeroutput> &gt;= <computeroutput>last</computeroutput>, no elements are erased and <computeroutput>last</computeroutput> is returned;</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>- The first element in the range to erase </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>- The last element in the range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the last one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="749" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="749" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a212265a5cfb3920a2c3e9fddb4b9363a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::erase</definition>
        <argsstring>(const ConstIterator &amp;first, const ConstIterator &amp;last) noexcept -&gt; Iterator</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1ConstIterator" kindref="compound">ConstIterator</ref> &amp;</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Erases the range of elements in [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>) Returns an <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> to the element after the last one erased. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In the case <computeroutput>first</computeroutput> &gt;= <computeroutput>last</computeroutput>, no elements are erased and <computeroutput>last</computeroutput> is returned;</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>- The first element in the range to erase </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>- The last element in the range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the last one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="766" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="766" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1afb7a191fc8b2e4694d43990d8a03a69f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::pop_back</definition>
        <argsstring>() noexcept -&gt; T requires Copyable&lt; T &gt;</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Removes the last element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="777" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="777" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a0a8eee7210b7dec7203744bd8f2d8a0f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::pop_front</definition>
        <argsstring>() noexcept -&gt; T requires Copyable&lt; T &gt;</argsstring>
        <name>pop_front</name>
        <briefdescription>
<para>Removes the first element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="786" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="786" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1afc705634849bcfc17d690d79f0a6d67f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::begin</definition>
        <argsstring>() -&gt; Iterator</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a Random Access Bidirectional iterator over the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, at the beginning. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator, at the beginning </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="796" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="796" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a1e16e34dbad26f08347338b55cda254a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::end</definition>
        <argsstring>() -&gt; Iterator</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a Random Access Bidirectional iterator over the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator, at the end </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="807" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="807" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a4ca5cc24862c27ec998f3f804a2f7c33" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::cbegin</definition>
        <argsstring>() -&gt; ConstIterator</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Returns a Random Access Bidirectional read-only iterator over the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, at the beginning. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator, at the beginning </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="818" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="818" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a4fb19b10b1ae6ae9ab92b8dbb06964e6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::cend</definition>
        <argsstring>() -&gt; ConstIterator</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Returns a Random Access Bidirectional read-only iterator over the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator, at the end </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="829" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="829" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a78a9096b4d3cac0a629b89b7f9459a72" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::operator[]</definition>
        <argsstring>(Integral auto index) noexcept -&gt; T &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>Integral auto</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Unchecked access-by-index operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The index to get the corresponding element for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The element at index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="840" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="840" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1af4bad05a29a47017cd9e98090b3a269f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::operator=</definition>
        <argsstring>(const RingBuffer &amp;buffer) noexcept -&gt; RingBuffer &amp;requires Copyable&lt; T &gt;</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="847" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="847" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a9a726c4d94b4093dd51dcbe7d0a6ca95" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::operator=</definition>
        <argsstring>(RingBuffer &amp;&amp;buffer) noexcept -&gt; RingBuffer &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> &amp;&amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="863" column="16" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="863" bodyend="875"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a431197cc81572d7700424d55a9cb9015" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::get_adjusted_internal_index</definition>
        <argsstring>(Integral auto index) const noexcept -&gt; usize</argsstring>
        <name>get_adjusted_internal_index</name>
        <param>
          <type>Integral auto</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Converts the given <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> index into the corresponding index into then underlying <computeroutput>T</computeroutput> array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> index to convert</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding index into the underlying <computeroutput>T</computeroutput> array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="894" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="894" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1acfe38af82e7deac539824d06ee274a1d" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::get_external_index_from_internal</definition>
        <argsstring>(Integral auto index) const noexcept -&gt; usize</argsstring>
        <name>get_external_index_from_internal</name>
        <param>
          <type>Integral auto</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Converts the given index into the underlying <computeroutput>T</computeroutput> array into a using facing index into the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The internal index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding user-facing index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="906" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="906" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a4d64072ea2e1741821442bcc4b598d8b" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::increment_indices</definition>
        <argsstring>() noexcept -&gt; void</argsstring>
        <name>increment_indices</name>
        <briefdescription>
<para>Used to increment the start and write indices into the underlying <computeroutput>T</computeroutput> array, and the size property, after pushing an element at the back, maintaining the logical <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="922" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="922" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a0ccdcf0754d637a2f0dd723f3a1c233a" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::increment_start</definition>
        <argsstring>() noexcept -&gt; void</argsstring>
        <name>increment_start</name>
        <briefdescription>
<para>Used to increment the start index into the underlying <computeroutput>T</computeroutput> array and the size property after popping an element from the front, maintaining the logical <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="935" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="935" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a2619cd50ccd3be2a1c0595713e9d46ab" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::decrement_write</definition>
        <argsstring>() noexcept -&gt; void</argsstring>
        <name>decrement_write</name>
        <briefdescription>
<para>Used to decrement the write index into the underlying <computeroutput>T</computeroutput> array when popping an element from the back. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="943" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="943" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1af597fa7435974acf973121f036c425ba" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::decrement_write_n</definition>
        <argsstring>(UnsignedIntegral auto n) noexcept -&gt; void</argsstring>
        <name>decrement_write_n</name>
        <param>
          <type>UnsignedIntegral auto</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="952" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="952" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a3961d8edf679e17eb66be15dfb172745" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert_internal</definition>
        <argsstring>(usize external_index, const T &amp;elem) noexcept -&gt; void</argsstring>
        <name>insert_internal</name>
        <param>
          <type>usize</type>
          <declname>external_index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the position indicated by the <computeroutput>external_index</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>external_index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The user-facing index into the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to insert the element at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="971" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="971" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a7869a4dd3ec607090c9b08ae8a738a5f" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert_internal</definition>
        <argsstring>(usize external_index, T &amp;&amp;elem) noexcept -&gt; void</argsstring>
        <name>insert_internal</name>
        <param>
          <type>usize</type>
          <declname>external_index</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the position indicated by the <computeroutput>external_index</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>external_index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The user-facing index into the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to insert the element at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1012" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1012" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a6859ee2ed1b643878af8daab2b851468" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::insert_emplace_internal</definition>
        <argsstring>(usize external_index, Args &amp;&amp;... args) noexcept -&gt; T &amp;</argsstring>
        <name>insert_emplace_internal</name>
        <param>
          <type>usize</type>
          <declname>external_index</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element at the insertion position indicated by the <computeroutput>external_index</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>external_index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The user-facing index into the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to insert the element at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments to the constructor for the element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1057" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1057" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1aef5f6bb6f92722d88dd3adc25eb9a540" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::erase_internal</definition>
        <argsstring>(usize external_index) noexcept -&gt; Iterator</argsstring>
        <name>erase_internal</name>
        <param>
          <type>usize</type>
          <declname>external_index</declname>
        </param>
        <briefdescription>
<para>Erases the element at the given index, returning an <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> to the element after the removed one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>external_index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The index to the element to remove. This should be a <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> index: IE, not an interal one into the <computeroutput>T</computeroutput> array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the one removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1103" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1103" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1a9630b6bb3f64dcd899318c1c008e9339" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::erase_internal</definition>
        <argsstring>(usize first, usize last) noexcept -&gt; Iterator</argsstring>
        <name>erase_internal</name>
        <param>
          <type>usize</type>
          <declname>first</declname>
        </param>
        <param>
          <type>usize</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Erases the range of elements in [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>) Returns an <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> to the element after the last one erased. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>- The first index in the range to erase. This should be a <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> index: IE, not an internal one into the <computeroutput>T</computeroutput> array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>- The last index<computeroutput>in the range to erase. This should be a</computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref><computeroutput> index: IE, not an internal one into the</computeroutput>T` array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the last one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1140" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1140" bodyend="1181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A simple Ring Buffer implementation. Supports resizing, writing, reading, erasing, and provides mutable and immutable random access iterators. </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="classhyperion_1_1utils_1_1RingBuffer_1autotoc_md7">
<title>Iterator Invalidation</title>
<para><itemizedlist>
<listitem><para>Iterators are lazily evaluated, so will only ever be invalidated at their current state. Performing any mutating operation (mutating the iterator, not the underlying data) on them will re-sync them with their associated <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>. The following operations will invalidate an iterator&apos;s current state:</para>
</listitem><listitem><para>Read-only operations: never</para>
</listitem><listitem><para>clear: always</para>
</listitem><listitem><para>reserve: only if the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> changed capacity</para>
</listitem><listitem><para>erase: Erased elements and all following elements</para>
</listitem><listitem><para>push_back, emplace_back: only <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1a1e16e34dbad26f08347338b55cda254a" kindref="member">end()</ref></computeroutput> until <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" kindref="member">capacity()</ref></computeroutput> is reached, then <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1afc705634849bcfc17d690d79f0a6d67f" kindref="member">begin()</ref></computeroutput> and <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1a1e16e34dbad26f08347338b55cda254a" kindref="member">end()</ref></computeroutput></para>
</listitem><listitem><para>insert, emplace: only the element at the position inserted/emplaced</para>
</listitem><listitem><para>pop_back: the element removed and <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1a1e16e34dbad26f08347338b55cda254a" kindref="member">end()</ref></computeroutput></para>
</listitem><listitem><para>pop_front: the element removed and <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1afc705634849bcfc17d690d79f0a6d67f" kindref="member">begin()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- The type to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>. Must Be Default Constructible. Does not currently support <computeroutput>T</computeroutput> of array types (eg, <computeroutput>T</computeroutput> = <computeroutput>U[]</computeroutput> or <computeroutput>T</computeroutput> = <computeroutput>U[N]</computeroutput>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect1>
    </detaileddescription>
    <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="60" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="60" bodyend="1182"/>
    <listofallmembers>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a56a142595a9c8d760bccead76a89059d" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>allocator_traits</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ad71d64188ee03762324281b7cdf53479" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>at</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a8d0178b773ad8c7e86f29c05abb38a07" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1afc705634849bcfc17d690d79f0a6d67f" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>begin</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a573926bc8d421ce6430d0667febe0ff0" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>capacity</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a4ca5cc24862c27ec998f3f804a2f7c33" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>cbegin</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a4fb19b10b1ae6ae9ab92b8dbb06964e6" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>cend</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ab4c1b33e8dc7dd3c277b52263dc12ba8" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>clear</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a35c14f35c955131f80be11f491da35b2" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>data</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a2619cd50ccd3be2a1c0595713e9d46ab" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>decrement_write</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1af597fa7435974acf973121f036c425ba" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>decrement_write_n</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a35516f4535f8928ccbc0843e2c1b28f5" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>DEFAULT_CAPACITY</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ad51cc68e07bebb98b32da61943cd14ff" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>DEFAULT_CAPACITY_INTERNAL</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ac0d35f01696149fe04d4a7efff065cf9" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>emplace</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a3224c979ea66ccdd9afd600cb0c42e13" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>emplace</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a7d9b545813a3db368f3a81ed395ad81b" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>emplace_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a3e3a291f345f069718216bdcd77da0eb" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>empty</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a1e16e34dbad26f08347338b55cda254a" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>end</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a5cf498eaa79cd97d04b7fba6ee5f156c" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>erase</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a9acd7eade2fb0013f204129dd06205fb" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>erase</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a3c19d9b2c48e88d40b3e33312acef83c" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>erase</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a212265a5cfb3920a2c3e9fddb4b9363a" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>erase</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1aef5f6bb6f92722d88dd3adc25eb9a540" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>erase_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a9630b6bb3f64dcd899318c1c008e9339" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>erase_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a516a5fdc004dfba8e7f061334d952257" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>front</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ad3d7f9cff7f483bc60375d13eaa524f4" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>full</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a431197cc81572d7700424d55a9cb9015" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>get_adjusted_internal_index</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1acfe38af82e7deac539824d06ee274a1d" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>get_external_index_from_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a4d64072ea2e1741821442bcc4b598d8b" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>increment_indices</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a0ccdcf0754d637a2f0dd723f3a1c233a" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>increment_start</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a37567a98f558c0a9fc94c10e0ea4cd98" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a0f738f72d4f2b4f2a11af9a7bbb6693b" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a15c738063a5e758691206375567e7918" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a174b57d0dbc1fba8503dc595ce5c5857" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a897e82176029ff4ddb06ae2cbcb612e2" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert_emplace</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1abb24c94637974a594eff5b4d8067772c" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert_emplace</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a6859ee2ed1b643878af8daab2b851468" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert_emplace_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a3961d8edf679e17eb66be15dfb172745" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a7869a4dd3ec607090c9b08ae8a738a5f" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>insert_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ad62169d34da656af913c31d7651101da" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>m_allocator</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a094110dd6f595978e42a81d0681af803" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>m_buffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a9648c9d5e84bb40e954877e11f7d6cb8" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>m_capacity</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a814d201c90a134e87f390b869f2d8181" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>m_loop_index</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ad15a44315ee8d9798803c1c6962a0815" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>m_start_index</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a5492e0f376f16783aed5a7d999f08596" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>m_write_index</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a0ee83a219c411bf8620ad8a02705b06e" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>max_size</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1af4bad05a29a47017cd9e98090b3a269f" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a9a726c4d94b4093dd51dcbe7d0a6ca95" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a78a9096b4d3cac0a629b89b7f9459a72" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>operator[]</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1afb7a191fc8b2e4694d43990d8a03a69f" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>pop_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a0a8eee7210b7dec7203744bd8f2d8a0f" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>pop_front</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a5a5c7f5747493b7fe309b13179af676f" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>push_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a69a4852fd8ee7e2dff747450750b0970" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>push_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a8ab29e09e70d671d8152269eb579907e" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>reserve</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a8e73273a589e8f9bf9cf1bad3de32d91" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a4bc4be8c55ba25415dc51d8d5ceca5ab" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a68e675965f9665739088efbf99e1b525" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a2f60eadf894c47c4f498015777f4f965" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ad20dec426a6be5aac2e9e2a4b3490cc5" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1a5a7e4ebce308fe97ddc010828466551d" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1aa94961cd191f3d00ca618ef01af9d7b5" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>size</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1ad5489ea17a1dfdf19d1237cacdcdfff1" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>unique_pointer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1afd55d29322b027a37bd25c9699e1cabf" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer</scope><name>~RingBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
