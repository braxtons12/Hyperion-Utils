<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="namespacehyperion_1_1utils" kind="namespace" language="C++">
    <compoundname>hyperion::utils</compoundname>
    <innerclass refid="classhyperion_1_1utils_1_1ChangeDetector" prot="public">hyperion::utils::ChangeDetector</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1Error" prot="public">hyperion::utils::Error</innerclass>
    <innerclass refid="structhyperion_1_1utils_1_1ErrorWrapper" prot="public">hyperion::utils::ErrorWrapper</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1LockFreeQueue" prot="public">hyperion::utils::LockFreeQueue</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1LockFreeQueueError" prot="public">hyperion::utils::LockFreeQueueError</innerclass>
    <innerclass refid="structhyperion_1_1utils_1_1LockFreeQueueErrorCategory" prot="public">hyperion::utils::LockFreeQueueErrorCategory</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1Logger" prot="public">hyperion::utils::Logger</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1LoggerError" prot="public">hyperion::utils::LoggerError</innerclass>
    <innerclass refid="structhyperion_1_1utils_1_1LoggerErrorCategory" prot="public">hyperion::utils::LoggerErrorCategory</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1LoggerInitError" prot="public">hyperion::utils::LoggerInitError</innerclass>
    <innerclass refid="structhyperion_1_1utils_1_1NoneType" prot="public">hyperion::utils::NoneType</innerclass>
    <innerclass refid="structhyperion_1_1utils_1_1OkWrapper" prot="public">hyperion::utils::OkWrapper</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1Option" prot="public">hyperion::utils::Option</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1Result" prot="public">hyperion::utils::Result</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1RingBuffer" prot="public">hyperion::utils::RingBuffer</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4" prot="public">hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1Span" prot="public">hyperion::utils::Span</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1Variant" prot="public">hyperion::utils::Variant</innerclass>
    <innernamespace refid="namespacehyperion_1_1utils_1_1concepts">hyperion::utils::concepts</innernamespace>
    <innernamespace refid="namespacehyperion_1_1utils_1_1type__traits">hyperion::utils::type_traits</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacehyperion_1_1utils_1a96f7d6c5a23787dd26427bf71898e0d5" prot="public" static="no" strong="yes">
        <type>u8</type>
        <name>LockFreeQueueErrorType</name>
        <enumvalue id="namespacehyperion_1_1utils_1a96f7d6c5a23787dd26427bf71898e0d5a505a83f220c02df2f85c3810cd9ceb38" prot="public">
          <name>Success</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput> occurred. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehyperion_1_1utils_1a96f7d6c5a23787dd26427bf71898e0d5a17a116d593ed4d653ef149929f8c2c2a" prot="public">
          <name>QueueIsFull</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The queue was full and policy is <computeroutput>QueuePolicy::ErrWhenFull</computeroutput> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehyperion_1_1utils_1a96f7d6c5a23787dd26427bf71898e0d5aa20ba812cc5b4e83c38e43d1055acaa5" prot="public">
          <name>QueueIsEmpty</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>The queue was empty when a read was attempted. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref></computeroutput>s that can occur with <computeroutput><ref refid="classhyperion_1_1utils_1_1LockFreeQueue" kindref="compound">LockFreeQueue</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/LockFreeQueue.h" line="14" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/LockFreeQueue.h" bodystart="15" bodyend="22"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehyperion_1_1utils_1ab9d823b30b1264aae09c48221a30acd5" prot="public" static="no" strong="yes">
        <type>usize</type>
        <name>QueuePolicy</name>
        <enumvalue id="namespacehyperion_1_1utils_1ab9d823b30b1264aae09c48221a30acd5a6c098abeda16e6962cbd9751233216a6" prot="public">
          <name>ErrWhenFull</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehyperion_1_1utils_1ab9d823b30b1264aae09c48221a30acd5af59de8191490de1c3fab1ccb54e813d6" prot="public">
          <name>OverwriteWhenFull</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/LockFreeQueue.h" line="131" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/LockFreeQueue.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehyperion_1_1utils_1a61ba7c36a87b6717e636dffcef4545a9" prot="public" static="no" strong="yes">
        <type>u8</type>
        <name>LogErrorType</name>
        <enumvalue id="namespacehyperion_1_1utils_1a61ba7c36a87b6717e636dffcef4545a9a505a83f220c02df2f85c3810cd9ceb38" prot="public">
          <name>Success</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> occurred. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehyperion_1_1utils_1a61ba7c36a87b6717e636dffcef4545a9acae23826c82ce041d3eb7a6e1883466c" prot="public">
          <name>QueueingError</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>failed to queue the entry for logging </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehyperion_1_1utils_1a61ba7c36a87b6717e636dffcef4545a9a06f597a89c0d4e641d94dbe0685b93ab" prot="public">
          <name>LogLevelError</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>the requested log level for the entry is lower than the minium level for the logger </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> categories that can occur when using the logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="28" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehyperion_1_1utils_1a508d26e9db0ca87f0be70018e5c240fd" prot="public" static="no" strong="yes">
        <type>usize</type>
        <name>RingBufferType</name>
        <enumvalue id="namespacehyperion_1_1utils_1a508d26e9db0ca87f0be70018e5c240fda407989de8916f5bbe0ba9ed3a373bc50" prot="public">
          <name>NotThreadSafe</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehyperion_1_1utils_1a508d26e9db0ca87f0be70018e5c240fda592812e50bc2ed9840a75e1694650c34" prot="public">
          <name>ThreadSafe</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The thread-safety type of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="29" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="30" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacehyperion_1_1utils_1abb449b55250ed0526e8a3c35bf1255d6" prot="public" static="no">
        <type><ref refid="classhyperion_1_1utils_1_1LockFreeQueueError" kindref="compound">LockFreeQueueError</ref></type>
        <definition>using hyperion::utils::QueueError = typedef LockFreeQueueError</definition>
        <argsstring></argsstring>
        <name>QueueError</name>
        <briefdescription>
<para>Alias for the <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> type we might recieve from the internal queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="40" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1a35cbdd7c3a2b22bfc8e664326f25b717" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr usize</type>
        <definition>constexpr usize hyperion::utils::DEFAULT_QUEUE_CAPACITY</definition>
        <argsstring></argsstring>
        <name>DEFAULT_QUEUE_CAPACITY</name>
        <initializer>= 512_usize</initializer>
        <briefdescription>
<para>The default capacityfor <computeroutput><ref refid="classhyperion_1_1utils_1_1LockFreeQueue" kindref="compound">LockFreeQueue</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/LockFreeQueue.h" line="138" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/LockFreeQueue.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1ac2092caf6190aa984db075c84f97f2f9" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="structhyperion_1_1utils_1_1NoneType" kindref="compound">NoneType</ref></type>
        <definition>constexpr NoneType hyperion::utils::none_t</definition>
        <argsstring></argsstring>
        <name>none_t</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" line="49" column="27" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a72f1d1d0efb62ac74508c8e8b4922da1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::ignore</definition>
        <argsstring>(Args &amp;&amp;... args) noexcept -&gt; void</argsstring>
        <name>ignore</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Utility function to ignore the given parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The Types of the things to ignore </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The things to ignore </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Ignore.h" line="13" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Ignore.h" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a0ae879e55146098dc518c28cd9986963" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IGNORE_WEAK_VTABLES_STOP auto</type>
        <definition>static IGNORE_WEAK_VTABLES_STOP auto hyperion::utils::lock_free_queue_category</definition>
        <argsstring>() noexcept -&gt; const LockFreeQueueErrorCategory &amp;</argsstring>
        <name>lock_free_queue_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/LockFreeQueue.h" line="74" column="20" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/LockFreeQueue.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a20552a8fdd5b726d4b117a7069e99895" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IGNORE_WEAK_VTABLES_STOP auto</type>
        <definition>static IGNORE_WEAK_VTABLES_STOP auto hyperion::utils::logger_category</definition>
        <argsstring>() noexcept -&gt; const LoggerErrorCategory &amp;</argsstring>
        <name>logger_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="93" column="20" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a6e7052a540525dcb19cad7f472028dc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
            <defval>DefaultLogParameters</defval>
          </param>
        </templateparamlist>
        <type>IGNORE_WEAK_VTABLES_STOP IGNORE_PADDING_STOP static IGNORE_UNUSED_TEMPLATES_START auto</type>
        <definition>IGNORE_WEAK_VTABLES_STOP IGNORE_PADDING_STOP static IGNORE_UNUSED_TEMPLATES_START auto hyperion::utils::get_global_logger</definition>
        <argsstring>() -&gt; Logger&lt; LogParameters &gt; &amp;</argsstring>
        <name>get_global_logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="548" column="14" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="548" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a553c4451e2e9932da6de49e242590d75" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
            <defval>DefaultLogParameters</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto hyperion::utils::initialize_global_logger</definition>
        <argsstring>(const std::string &amp;root_name) -&gt; void</argsstring>
        <name>initialize_global_logger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>root_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="554" column="20" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="554" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1ac5ea24f8ad0e9d5d16d5a71f60bf5189" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
            <defval>DefaultLogParameters</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto hyperion::utils::initialize_global_logger</definition>
        <argsstring>(std::string &amp;&amp;root_name) -&gt; void</argsstring>
        <name>initialize_global_logger</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>root_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="559" column="20" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="559" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a7308587709617b406933c0dd62c77e6f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
            <defval>DefaultLogParameters</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto hyperion::utils::initialize_global_logger</definition>
        <argsstring>(const std::string &amp;root_name, const std::string &amp;directory_name) -&gt; void</argsstring>
        <name>initialize_global_logger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>root_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="565" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a629f24e97547928c6e34accb24556fcb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
            <defval>DefaultLogParameters</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto hyperion::utils::initialize_global_logger</definition>
        <argsstring>(std::string &amp;&amp;root_name, const std::string &amp;directory_name) -&gt; void</argsstring>
        <name>initialize_global_logger</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>root_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="572" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="572" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a34a65a2015886f437b59af37aba7993e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
            <defval>DefaultLogParameters</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto hyperion::utils::initialize_global_logger</definition>
        <argsstring>(const std::string &amp;root_name, std::string &amp;&amp;directory_name) -&gt; void</argsstring>
        <name>initialize_global_logger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>root_name</declname>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>directory_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="578" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="578" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a952b1890f1a5588f99107cdb56c7573d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
            <defval>DefaultLogParameters</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto hyperion::utils::initialize_global_logger</definition>
        <argsstring>(std::string &amp;&amp;root_name, std::string &amp;&amp;directory_name) -&gt; void</argsstring>
        <name>initialize_global_logger</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>root_name</declname>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>directory_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="584" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="584" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a626db1ca39c5604ef07123b3cb738805" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>fmt::char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hyperion::utils::MESSAGE</definition>
        <argsstring>(Option&lt; usize &gt; thread_id, const S &amp;format_string, Args &amp;&amp;... args) noexcept</argsstring>
        <name>MESSAGE</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref>&lt; usize &gt;</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_string</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="592" column="13" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="592" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a4b12badebc423f05b712bd70b6be96d0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>fmt::char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hyperion::utils::TRACE</definition>
        <argsstring>(Option&lt; usize &gt; thread_id, const S &amp;format_string, Args &amp;&amp;... args) noexcept</argsstring>
        <name>TRACE</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref>&lt; usize &gt;</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_string</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="600" column="13" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="600" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1aadbc444ae6b442b2bec03ec526a7714f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>fmt::char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hyperion::utils::INFO</definition>
        <argsstring>(Option&lt; usize &gt; thread_id, const S &amp;format_string, Args &amp;&amp;... args) noexcept</argsstring>
        <name>INFO</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref>&lt; usize &gt;</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_string</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="608" column="13" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="608" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1aa02191772de5154eac4efb0564d56e3f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>fmt::char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hyperion::utils::WARN</definition>
        <argsstring>(Option&lt; usize &gt; thread_id, const S &amp;format_string, Args &amp;&amp;... args) noexcept</argsstring>
        <name>WARN</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref>&lt; usize &gt;</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_string</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="616" column="13" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="616" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a56a0df9d2d15f6a10d01762b5a78f9d3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>LoggerParametersType</type>
            <declname>LogParameters</declname>
            <defname>LogParameters</defname>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>fmt::char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hyperion::utils::ERROR</definition>
        <argsstring>(Option&lt; usize &gt; thread_id, const S &amp;format_string, Args &amp;&amp;... args) noexcept</argsstring>
        <name>ERROR</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref>&lt; usize &gt;</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_string</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" line="624" column="13" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Logger.h" bodystart="624" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a167203447ead8a67a331178cfe0f59b4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Passable</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>requires DefaultConstructible&lt; T &gt; &amp;&amp;constexpr NotReference&lt; T &gt; auto</type>
        <definition>requires DefaultConstructible&lt;T&gt;&amp;&amp; constexpr NotReference&lt;T&gt; auto hyperion::utils::Some</definition>
        <argsstring>(const T &amp;some) noexcept -&gt; Option&lt; T &gt;</argsstring>
        <name>Some</name>
        <param>
          <type>const T &amp;</type>
          <declname>some</declname>
        </param>
        <briefdescription>
<para>Convenience shorthand for <computeroutput><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref>&lt;T&gt;<ref refid="namespacehyperion_1_1utils_1a167203447ead8a67a331178cfe0f59b4" kindref="member">Some</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>some</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" line="686" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" bodystart="686" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1ad458e5e1495ab2e73cca8549d57ba083" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Passable</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>requires DefaultConstructible&lt; T &gt; &amp;&amp;constexpr NotReference&lt; T &gt; auto</type>
        <definition>requires DefaultConstructible&lt;T&gt;&amp;&amp; constexpr NotReference&lt;T&gt; auto hyperion::utils::Some</definition>
        <argsstring>(T &amp;&amp;some) noexcept -&gt; Option&lt; T &gt;</argsstring>
        <name>Some</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>some</declname>
        </param>
        <briefdescription>
<para>Convenience shorthand for <computeroutput><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref>&lt;T&gt;<ref refid="namespacehyperion_1_1utils_1a167203447ead8a67a331178cfe0f59b4" kindref="member">Some</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>some</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" line="695" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" bodystart="695" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1a5e06cdc7510fc3026479a6c5dac16e88" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::None</definition>
        <argsstring>() noexcept -&gt; NoneType</argsstring>
        <name>None</name>
        <briefdescription>
<para>Convenience shorthand for <computeroutput><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref>&lt;T&gt;<ref refid="namespacehyperion_1_1utils_1a5e06cdc7510fc3026479a6c5dac16e88" kindref="member">None</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" line="700" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" bodystart="700" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1aac885c2d1cb0fd6d65e0864a7c3d5437" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Passable</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>requires NotReference&lt; T &gt; &amp;&amp;static constexpr DefaultConstructible&lt; T &gt; auto</type>
        <definition>requires NotReference&lt;T&gt;&amp;&amp; static constexpr DefaultConstructible&lt;T&gt; auto hyperion::utils::Ok</definition>
        <argsstring>(const T &amp;ok) noexcept -&gt; OkWrapper&lt; T &gt;</argsstring>
        <name>Ok</name>
        <param>
          <type>const T &amp;</type>
          <declname>ok</declname>
        </param>
        <briefdescription>
<para>Convenience shorthand for <computeroutput>Result()&lt;T, E&gt;::Ok</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to store in the <computeroutput>Result()</computeroutput> representing success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" line="1805" column="30" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" bodystart="1805" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1abed36cb3c11afb3ded590b0d14c6e073" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Passable</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>requires NotReference&lt; T &gt; &amp;&amp;static constexpr DefaultConstructible&lt; T &gt; auto</type>
        <definition>requires NotReference&lt;T&gt;&amp;&amp; static constexpr DefaultConstructible&lt;T&gt; auto hyperion::utils::Ok</definition>
        <argsstring>(T &amp;&amp;ok) noexcept -&gt; OkWrapper&lt; T &gt;</argsstring>
        <name>Ok</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>ok</declname>
        </param>
        <briefdescription>
<para>Convenience shorthand for <computeroutput>Result()&lt;T, E&gt;::Ok</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to store in the <computeroutput>Result()</computeroutput> representing success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" line="1814" column="30" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" bodystart="1814" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1ac1f3affa75832108b1c2af1b36514e07" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ErrorType</type>
            <declname>E</declname>
            <defname>E</defname>
            <defval>Error</defval>
          </param>
        </templateparamlist>
        <type>requires NotReference&lt; E &gt; &amp;&amp;static constexpr DefaultConstructible&lt; E &gt; auto</type>
        <definition>requires NotReference&lt;E&gt;&amp;&amp; static constexpr DefaultConstructible&lt;E&gt; auto hyperion::utils::Err</definition>
        <argsstring>(const E &amp;err) noexcept -&gt; ErrorWrapper&lt; E &gt;</argsstring>
        <name>Err</name>
        <param>
          <type>const E &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Convenience shorthand for <computeroutput>Result()&lt;T, E&gt;::Err</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to store in the <computeroutput>Result()</computeroutput> representing failure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" line="1823" column="30" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" bodystart="1823" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1adbc7aca5151649edd3a90df0ec0a37b2" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ErrorType</type>
            <declname>E</declname>
            <defname>E</defname>
            <defval>Error</defval>
          </param>
        </templateparamlist>
        <type>requires NotReference&lt; E &gt; &amp;&amp;static constexpr DefaultConstructible&lt; E &gt; auto</type>
        <definition>requires NotReference&lt;E&gt;&amp;&amp; static constexpr DefaultConstructible&lt;E&gt; auto hyperion::utils::Err</definition>
        <argsstring>(E &amp;&amp;err) noexcept -&gt; ErrorWrapper&lt; E &gt;</argsstring>
        <name>Err</name>
        <param>
          <type>E &amp;&amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Convenience shorthand for <computeroutput>Result()&lt;T, E&gt;::Err</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to store in the <computeroutput>Result()</computeroutput> representing failure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" line="1832" column="30" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/OptionAndResult.h" bodystart="1832" bodyend="1834"/>
      </memberdef>
      <memberdef kind="function" id="namespacehyperion_1_1utils_1aa42bfdfdf4fe98b6d254c43a9699b65f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto hyperion::utils::get</definition>
        <argsstring>() noexcept -&gt; void</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Variant.h" line="21" column="13" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Variant.h" bodystart="21" bodyend="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a simple change-of-value detector. </para>
    </briefdescription>
    <detaileddescription>
<para>Compile-time configurable Policy-based ring buffer.</para>
<para>Hyperion <ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref> and Hyperion <ref refid="classhyperion_1_1utils_1_1Result" kindref="compound">Result</ref>.</para>
<para>Hyperion logging facilities.</para>
<para>This is a Lock-Free Single-ended Queue implementation using contiguous memory allocations.</para>
<para>Ignore is used to ignore an arbitrary number of unused parameters.</para>
<para><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> is the base type for communicating recoverable errors inside Hyperion.</para>
<para>This is useful for when you need to store a value and track whether writes to the value are actually changes</para>
<para><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref> speaks <computeroutput>std::error_code</computeroutput> as well as custom error messages, and combined with <computeroutput><ref refid="classhyperion_1_1utils_1_1Result" kindref="compound">Result</ref></computeroutput> is easily composable and propogated</para>
<para>Hyperion&apos;s logging facilities are robust and composable. Behavioral (Policy) configuration is configurable at compile time with via template parameters, and output configuration is configurable by supplying the desired <computeroutput>Sink</computeroutput>s on creation</para>
<para><itemizedlist>
<listitem><para><computeroutput><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref></computeroutput> is a port of Rust&apos;s <computeroutput><ref refid="classhyperion_1_1utils_1_1Option" kindref="compound">Option</ref></computeroutput> type to C++, and as such as a replacement to <computeroutput>std::optional</computeroutput> with various monadic operations and an improved interface and API</para>
</listitem><listitem><para>&apos;<ref refid="classhyperion_1_1utils_1_1Result" kindref="compound">Result</ref>&apos; is a port of Rust&apos;s <computeroutput><ref refid="classhyperion_1_1utils_1_1Result" kindref="compound">Result</ref></computeroutput> type to C++, and as such is an alternative to the proposed <computeroutput>std::expected</computeroutput> or <computeroutput>boost::outcome</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> has an API matching <computeroutput>std::vector</computeroutput> in its default configuration or can be configured to provide a subset of that API, but provide lock-free concurrency </para>
    </detaileddescription>
    <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/ChangeDetector.h" line="11" column="1"/>
  </compounddef>
</doxygen>
