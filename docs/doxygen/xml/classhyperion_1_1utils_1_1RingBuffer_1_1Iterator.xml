<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kind="class" language="C++" prot="public">
    <compoundname>hyperion::utils::RingBuffer::Iterator</compoundname>
    <includes refid="RingBuffer_8h" local="no">RingBuffer.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1aca864c6d14228d0b04c95c76896908d5" prot="public" static="no">
        <type>std::random_access_iterator_tag</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::iterator_category =  std::random_access_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="74" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a7593422feda37fe1157f0478cf7a6b83" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="75" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a85a9a057cf16033758e94b4d04f68ebb" prot="public" static="no">
        <type>T</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="76" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a1927a9debc019956cb5bcb9487dcbc0a" prot="public" static="no">
        <type>value_type *</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::pointer =  value_type*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="77" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a4c0f147bf8fc1fce45e167b3d00a9497" prot="public" static="no">
        <type>value_type &amp;</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::reference =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="78" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1ae984bf2c0cab7f38b0f84127385568af" prot="private" static="no" mutable="no">
        <type>pointer</type>
        <definition>pointer hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::m_ptr</definition>
        <argsstring></argsstring>
        <name>m_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="222" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1aa98744549829ce2eb472bc71b125c050" prot="private" static="no" mutable="no">
        <type><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> *</type>
        <definition>RingBuffer* hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::m_container_ptr</definition>
        <argsstring></argsstring>
        <name>m_container_ptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="223" column="12" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1ab23d0535e1ab725be5b6c094ebaad778" prot="private" static="no" mutable="no">
        <type>usize</type>
        <definition>usize hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::m_current_index</definition>
        <argsstring></argsstring>
        <name>m_current_index</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="224" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1ac882e8a6b6e433f783e9534df62029d2" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::Iterator</definition>
        <argsstring>(pointer ptr, RingBuffer *containerPtr, usize currentIndex) noexcept</argsstring>
        <name>Iterator</name>
        <param>
          <type>pointer</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> *</type>
          <declname>containerPtr</declname>
        </param>
        <param>
          <type>usize</type>
          <declname>currentIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="80" column="20" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a049672369094ad3d76f46f2c37a10bac" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::Iterator</definition>
        <argsstring>(const Iterator &amp;iter) noexcept=default</argsstring>
        <name>Iterator</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="85" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a71024ac83bf681c86c18113e831ed110" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::Iterator</definition>
        <argsstring>(Iterator &amp;&amp;iter) noexcept=default</argsstring>
        <name>Iterator</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;&amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="86" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a48ce567cf52bad5461535b2ec8b0a3c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::~Iterator</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a9bf8b6ef41b39ce11957a4a4d7e3a996" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::get_index</definition>
        <argsstring>() const noexcept -&gt; usize</argsstring>
        <name>get_index</name>
        <briefdescription>
<para>Returns the index in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> that corresponds to the element this iterator points to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index corresponding with the element this points to </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="93" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a81a61236b930e404fc80e9f4acc7c233" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator=</definition>
        <argsstring>(const Iterator &amp;iter) noexcept -&gt; Iterator &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="97" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a0ae3af28a4b23aab60914a3a690185dc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator=</definition>
        <argsstring>(Iterator &amp;&amp;iter) noexcept -&gt; Iterator &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;&amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="98" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a470411e7224f6abb5619e0b3f0255e0e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator==</definition>
        <argsstring>(const Iterator &amp;rhs) const noexcept -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="100" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a29ea08385fc4f369d1f677a5b2dfc58c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator!=</definition>
        <argsstring>(const Iterator &amp;rhs) const noexcept -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="104" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1ab30f0a305a1ec255886e1b52ac9a3a4c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator*</definition>
        <argsstring>() const noexcept -&gt; reference</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="108" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a0ca397fcc08b2bb3559c9adabd92e3f8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator-&gt;</definition>
        <argsstring>() noexcept -&gt; pointer</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="112" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a1aff65714cfb6e66850d53934e14e5b3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator++</definition>
        <argsstring>() noexcept -&gt; Iterator &amp;</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="116" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a47c5afaaaf0680667dbe33717097f7eb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator++</definition>
        <argsstring>(int) noexcept -&gt; Iterator</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="128" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a758db8333fd5d54468b495e2b8a207c4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator--</definition>
        <argsstring>() noexcept -&gt; Iterator &amp;</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="134" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="134" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a04b1686ad16c539464ade5522bdd7880" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator--</definition>
        <argsstring>(int) noexcept -&gt; Iterator</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="144" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a6460d91030642bd502b637ec68ae746e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator+</definition>
        <argsstring>(Integral auto rhs) const noexcept -&gt; Iterator</argsstring>
        <name>operator+</name>
        <param>
          <type>Integral auto</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="150" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="150" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a24d053e686f230ed52fd6a3979b6a08a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator+=</definition>
        <argsstring>(Integral auto rhs) noexcept -&gt; Iterator &amp;</argsstring>
        <name>operator+=</name>
        <param>
          <type>Integral auto</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="168" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a6040b9e72da50439949f5ee5d1ed8c56" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator-</definition>
        <argsstring>(Integral auto rhs) const noexcept -&gt; Iterator</argsstring>
        <name>operator-</name>
        <param>
          <type>Integral auto</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="173" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="173" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a4145bdb7afeb2e7470785cca645f52fb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator-=</definition>
        <argsstring>(Integral auto rhs) noexcept -&gt; Iterator &amp;</argsstring>
        <name>operator-=</name>
        <param>
          <type>Integral auto</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="191" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a783df6dcb077adf20e8aefcb0feb4b45" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator-</definition>
        <argsstring>(const Iterator &amp;rhs) const noexcept -&gt; difference_type</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="196" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a1fb7fcdf410c0e94d483629beeb03f8f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator[]</definition>
        <argsstring>(Integral auto index) noexcept -&gt; Iterator</argsstring>
        <name>operator[]</name>
        <param>
          <type>Integral auto</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="201" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1aeb1b75f3955340d001733242cbb74bc1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator&gt;</definition>
        <argsstring>(const Iterator &amp;rhs) const noexcept -&gt; bool</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="205" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a6b8d9208208709681385341376c2afc7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator&lt;</definition>
        <argsstring>(const Iterator &amp;rhs) const noexcept -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="209" column="18" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1adf6943fa1660ed050cbef0be8343e552" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator&gt;=</definition>
        <argsstring>(const Iterator &amp;rhs) const noexcept -&gt; bool</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="213" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1abcf378b3772c096f8843750eb9b57227" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, ThreadSafety, Allocator &gt;::Iterator::operator&lt;=</definition>
        <argsstring>(const Iterator &amp;rhs) const noexcept -&gt; bool</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="217" column="18" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="217" bodyend="219"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Random-Access Bidirectional iterator for <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>All navigation operators are checked such that any movement past <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1afc705634849bcfc17d690d79f0a6d67f" kindref="member">begin()</ref></computeroutput> or <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_1a1e16e34dbad26f08347338b55cda254a" kindref="member">end()</ref></computeroutput> is ignored. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="72" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="72" bodyend="225"/>
    <listofallmembers>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a7593422feda37fe1157f0478cf7a6b83" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>difference_type</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a9bf8b6ef41b39ce11957a4a4d7e3a996" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>get_index</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1ac882e8a6b6e433f783e9534df62029d2" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>Iterator</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a049672369094ad3d76f46f2c37a10bac" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>Iterator</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a71024ac83bf681c86c18113e831ed110" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>Iterator</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1aca864c6d14228d0b04c95c76896908d5" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>iterator_category</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1aa98744549829ce2eb472bc71b125c050" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>m_container_ptr</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1ab23d0535e1ab725be5b6c094ebaad778" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>m_current_index</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1ae984bf2c0cab7f38b0f84127385568af" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>m_ptr</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a29ea08385fc4f369d1f677a5b2dfc58c" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator!=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1ab30f0a305a1ec255886e1b52ac9a3a4c" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator*</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a6460d91030642bd502b637ec68ae746e" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator+</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a1aff65714cfb6e66850d53934e14e5b3" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator++</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a47c5afaaaf0680667dbe33717097f7eb" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator++</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a24d053e686f230ed52fd6a3979b6a08a" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator+=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a6040b9e72da50439949f5ee5d1ed8c56" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator-</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a783df6dcb077adf20e8aefcb0feb4b45" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator-</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a758db8333fd5d54468b495e2b8a207c4" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator--</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a04b1686ad16c539464ade5522bdd7880" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator--</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a4145bdb7afeb2e7470785cca645f52fb" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator-=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a0ca397fcc08b2bb3559c9adabd92e3f8" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator-&gt;</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a6b8d9208208709681385341376c2afc7" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator&lt;</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1abcf378b3772c096f8843750eb9b57227" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator&lt;=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a81a61236b930e404fc80e9f4acc7c233" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a0ae3af28a4b23aab60914a3a690185dc" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a470411e7224f6abb5619e0b3f0255e0e" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator==</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1aeb1b75f3955340d001733242cbb74bc1" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator&gt;</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1adf6943fa1660ed050cbef0be8343e552" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator&gt;=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a1fb7fcdf410c0e94d483629beeb03f8f" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>operator[]</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a1927a9debc019956cb5bcb9487dcbc0a" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>pointer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a4c0f147bf8fc1fce45e167b3d00a9497" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>reference</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a85a9a057cf16033758e94b4d04f68ebb" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>value_type</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_1_1Iterator_1a48ce567cf52bad5461535b2ec8b0a3c8" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer::Iterator</scope><name>~Iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
