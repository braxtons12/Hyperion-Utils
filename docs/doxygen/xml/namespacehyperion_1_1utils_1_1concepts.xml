<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="namespacehyperion_1_1utils_1_1concepts" kind="namespace" language="C++">
    <compoundname>hyperion::utils::concepts</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ae483ba9141f247d4a9075408b93ef19a" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::FloatingPoint</definition>
        <argsstring></argsstring>
        <name>FloatingPoint</name>
        <initializer>= std::floating_point&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>std::floating_point&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="18" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a69370affcc93280870f33f2290d67ded" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Integral</definition>
        <argsstring></argsstring>
        <name>Integral</name>
        <initializer>= std::integral&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>std::integral&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="22" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a43ff7f0cda2cb9621cb93a204c502559" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::UnsignedIntegral</definition>
        <argsstring></argsstring>
        <name>UnsignedIntegral</name>
        <initializer>= std::unsigned_integral&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="25" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a374d5756b8e1f9f8f5308bf0521e235f" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::SignedIntegral</definition>
        <argsstring></argsstring>
        <name>SignedIntegral</name>
        <initializer>= std::signed_integral&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>std::signed_integral&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="29" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aa9ece778cf76997978ab73cc4b25a5f2" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Numeric</definition>
        <argsstring></argsstring>
        <name>Numeric</name>
        <initializer>= <ref refid="namespacehyperion_1_1utils_1_1concepts_1ae483ba9141f247d4a9075408b93ef19a" kindref="member">FloatingPoint</ref>&lt;T&gt; || <ref refid="namespacehyperion_1_1utils_1_1concepts_1a69370affcc93280870f33f2290d67ded" kindref="member">Integral</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires the type to be a numeric type ie: FloatingPoint&lt;T&gt; or Integral&lt;T&gt; is true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="34" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a207fb425b6c3f323944d695af9ff35c0" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::SignedNumeric</definition>
        <argsstring></argsstring>
        <name>SignedNumeric</name>
        <initializer>= <ref refid="namespacehyperion_1_1utils_1_1concepts_1ae483ba9141f247d4a9075408b93ef19a" kindref="member">FloatingPoint</ref>&lt;T&gt; || <ref refid="namespacehyperion_1_1utils_1_1concepts_1a374d5756b8e1f9f8f5308bf0521e235f" kindref="member">SignedIntegral</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires the type to be a numeric type ie: FloatingPoint&lt;T&gt; or Integral&lt;T&gt; is true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="39" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ac2ff757814ba72f2415c575a26b42b40" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Pointer</definition>
        <argsstring></argsstring>
        <name>Pointer</name>
        <initializer>= std::is_pointer_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept for <computeroutput>std::is_pointer_v&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="43" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a0b58ee3ba92ac2f3f9257bfd000f1df5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotPointer</definition>
        <argsstring></argsstring>
        <name>NotPointer</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1ac2ff757814ba72f2415c575a26b42b40" kindref="member">Pointer</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept for <computeroutput>! std::is_pointer_v&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="47" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a9cfdd2078fb05f507be09d79aac2b8e7" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Reference</definition>
        <argsstring></argsstring>
        <name>Reference</name>
        <initializer>= std::is_reference_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept for <computeroutput>std::is_reference_v&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="51" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aa301d8cb42bc46687d17fe61a84e4823" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotReference</definition>
        <argsstring></argsstring>
        <name>NotReference</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1a9cfdd2078fb05f507be09d79aac2b8e7" kindref="member">Reference</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept for <computeroutput>! std::is_reference_v&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="55" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1af19c1e730de492d28bde31139a313368" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Der</type>
          </param>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Derived</definition>
        <argsstring></argsstring>
        <name>Derived</name>
        <initializer>= std::derived_from&lt;std::remove_pointer_t&lt;std::decay_t&lt;Der&gt;&gt;,
										std::remove_pointer_t&lt;std::decay_t&lt;Base&gt;&gt;&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>std::derived_from&lt;T, U&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="59" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a99418ce0c8fefce2d9dea2913b1dbd2c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Convertible</definition>
        <argsstring></argsstring>
        <name>Convertible</name>
        <initializer>= std::is_convertible_v&lt;From, To&gt;</initializer>
        <briefdescription>
<para>Concept that requires <computeroutput>From</computeroutput> is convertible to <computeroutput>To</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="64" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ad8e6e34397be94651679443cbd658217" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotConvertible</definition>
        <argsstring></argsstring>
        <name>NotConvertible</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1a99418ce0c8fefce2d9dea2913b1dbd2c" kindref="member">Convertible</ref>&lt;From, To&gt;</initializer>
        <briefdescription>
<para>Concept that requires <computeroutput>From</computeroutput> is <bold>not</bold> convertible to <computeroutput>To</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="68" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a5a0aa19e329314526a12ff2f6d85bac8" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::ErrorType</definition>
        <argsstring></argsstring>
        <name>ErrorType</name>
        <initializer>= <ref refid="namespacehyperion_1_1utils_1_1concepts_1af19c1e730de492d28bde31139a313368" kindref="member">Derived</ref>&lt;E, <ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">Error</ref>&gt;</initializer>
        <briefdescription>
<para>Concept that requires <computeroutput>E</computeroutput> to be an <computeroutput>ErrorType</computeroutput> (aka derived from <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">hyperion::utils::Error</ref></computeroutput>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="73" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1abbc59135999b7d76700a4ca0f5a01c0d" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotErrorType</definition>
        <argsstring></argsstring>
        <name>NotErrorType</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1a5a0aa19e329314526a12ff2f6d85bac8" kindref="member">ErrorType</ref>&lt;E&gt;</initializer>
        <briefdescription>
<para>Concept that requires <computeroutput>E</computeroutput> is not an <computeroutput>ErrorType</computeroutput> (aka <bold>NOT</bold> derived from <computeroutput><ref refid="classhyperion_1_1utils_1_1Error" kindref="compound">hyperion::utils::Error</ref></computeroutput>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="78" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aa78da334588bec43ce764721aefc8403" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::ConstructibleFrom</definition>
        <argsstring></argsstring>
        <name>ConstructibleFrom</name>
        <initializer>= requires(Args&amp;&amp;... args) {
		T{args...};
	}</initializer>
        <briefdescription>
<para>Concept that requires <computeroutput>T</computeroutput> to be constructible from the parameter pack <computeroutput>Args</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="82" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aed747cb79e608bc2c0b772061fd7e35b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Same</definition>
        <argsstring></argsstring>
        <name>Same</name>
        <initializer>= std::same_as&lt;T, U&gt;</initializer>
        <briefdescription>
<para>Concept that requires <computeroutput>T</computeroutput> and <computeroutput>U</computeroutput> to be the same type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="88" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1abe28941082caafa3cd9cf9b4c2579ab7" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotSame</definition>
        <argsstring></argsstring>
        <name>NotSame</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1aed747cb79e608bc2c0b772061fd7e35b" kindref="member">Same</ref>&lt;T, U&gt;</initializer>
        <briefdescription>
<para>Concept that requires <computeroutput>T</computeroutput> and <computeroutput>U</computeroutput> to be the same type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="92" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a7c1b3fa0eb1062e85a6067fb54ce322c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::InequalityComparable</definition>
        <argsstring></argsstring>
        <name>InequalityComparable</name>
        <initializer>= type_traits::has_not_equal_v&lt;T, U&gt;</initializer>
        <briefdescription>
<para>Concept requiring <computeroutput>T</computeroutput> to be inequality comparable to <computeroutput>U</computeroutput> (<computeroutput>T</computeroutput> has <computeroutput>operator!=</computeroutput> for <computeroutput>U</computeroutput>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="97" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a6e16f74c73737fa6b31d96a123304182" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Contains</definition>
        <argsstring></argsstring>
        <name>Contains</name>
        <initializer>= mpl::contains_v&lt;T, List&gt;</initializer>
        <briefdescription>
<para>Concept requiring that the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, contains the type <computeroutput>T</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="101" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ad412cd7254b59025a0461c3a2c8a597f" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::CopyConstructible</definition>
        <argsstring></argsstring>
        <name>CopyConstructible</name>
        <initializer>= std::is_copy_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is copy constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="105" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1af1b6243ddd74ddc44d52fabbb9ba64a5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::TriviallyCopyConstructible</definition>
        <argsstring></argsstring>
        <name>TriviallyCopyConstructible</name>
        <initializer>= std::is_trivially_copy_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is trivially copy constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="109" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aa616517a72d828c21f8d1364ec74dbc9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllCopyConstructible</definition>
        <argsstring></argsstring>
        <name>AllCopyConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_copy_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is copy constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="114" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a3f71a0db49d75bf5c169072087f1a82a" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllTriviallyCopyConstructible</definition>
        <argsstring></argsstring>
        <name>AllTriviallyCopyConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_trivially_copy_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is copy constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="120" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ab46771039d8fe5bf6f4a513ed8ac5402" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::CopyAssignable</definition>
        <argsstring></argsstring>
        <name>CopyAssignable</name>
        <initializer>= std::is_copy_assignable_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is copy assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="125" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1afa962e6bc18918d2e13e8fd18a3c65ec" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::TriviallyCopyAssignable</definition>
        <argsstring></argsstring>
        <name>TriviallyCopyAssignable</name>
        <initializer>= std::is_trivially_copy_assignable_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is copy assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="129" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1afdc9150ef111a092eddcb56b9ceaa06c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllCopyAssignable</definition>
        <argsstring></argsstring>
        <name>AllCopyAssignable</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_copy_assignable, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is copy assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="134" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aac2e7de0c8d503467fb88683cd6df8a9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllTriviallyCopyAssignable</definition>
        <argsstring></argsstring>
        <name>AllTriviallyCopyAssignable</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_trivially_copy_assignable, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is copy assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="139" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a45826bc38722e7c06be57f99ef8955fe" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NoexceptCopyConstructible</definition>
        <argsstring></argsstring>
        <name>NoexceptCopyConstructible</name>
        <initializer>= std::is_nothrow_copy_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is noexcept copy constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="144" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a2a83f71915980d6a4ab942fbc80c11ab" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllNoexceptCopyConstructible</definition>
        <argsstring></argsstring>
        <name>AllNoexceptCopyConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_nothrow_copy_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is nothrow copy constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="149" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a8a6aa302ecd7dce5513e9864d1c8439e" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NoexceptCopyAssignable</definition>
        <argsstring></argsstring>
        <name>NoexceptCopyAssignable</name>
        <initializer>= std::is_nothrow_copy_assignable_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is noexcept copy assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="154" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ac6f720d5b61deddf2e9fe22cb72eb73c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllNoexceptCopyAssignable</definition>
        <argsstring></argsstring>
        <name>AllNoexceptCopyAssignable</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_nothrow_copy_assignable, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is nothrow copy assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="159" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a7a88cbce9b1de2396bb717ea4655d3a2" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::MoveConstructible</definition>
        <argsstring></argsstring>
        <name>MoveConstructible</name>
        <initializer>= std::is_move_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is move constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="164" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ad577291fb5fac51a358ed9a9e154fd9e" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::TriviallyMoveConstructible</definition>
        <argsstring></argsstring>
        <name>TriviallyMoveConstructible</name>
        <initializer>= std::is_trivially_move_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is move constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="168" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aba599a06f3adb2683d865d4b8c9f31b9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllMoveConstructible</definition>
        <argsstring></argsstring>
        <name>AllMoveConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_move_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is move constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="173" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a919b3b39a61de7edaae3ad74c8e88d48" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllTriviallyMoveConstructible</definition>
        <argsstring></argsstring>
        <name>AllTriviallyMoveConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_trivially_move_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is move constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="179" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1af948fd5f70b36a854fc17a2e90b7ecdb" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::MoveAssignable</definition>
        <argsstring></argsstring>
        <name>MoveAssignable</name>
        <initializer>= std::is_move_assignable_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is move assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="184" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a074a521ea3f6b2b681c4441c81793d5d" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::TriviallyMoveAssignable</definition>
        <argsstring></argsstring>
        <name>TriviallyMoveAssignable</name>
        <initializer>= std::is_trivially_move_assignable_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is move assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="188" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a0b24b5597602a90b4e59aa571144b4f3" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllMoveAssignable</definition>
        <argsstring></argsstring>
        <name>AllMoveAssignable</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_move_assignable, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is move assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="193" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a00222c50ca1d48dcef0a447a9f58f448" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllTriviallyMoveAssignable</definition>
        <argsstring></argsstring>
        <name>AllTriviallyMoveAssignable</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_trivially_move_assignable, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is move assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="198" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ae4b965e81ac9275a29731573626cd49d" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NoexceptMoveConstructible</definition>
        <argsstring></argsstring>
        <name>NoexceptMoveConstructible</name>
        <initializer>= std::is_nothrow_move_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is noexcept move constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="203" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a75f11360a095a51b39492a79160e81a8" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllNoexceptMoveConstructible</definition>
        <argsstring></argsstring>
        <name>AllNoexceptMoveConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_nothrow_move_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is nothrow move constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="208" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aee9747af22f0461c9c253d2582984e73" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NoexceptMoveAssignable</definition>
        <argsstring></argsstring>
        <name>NoexceptMoveAssignable</name>
        <initializer>= std::is_nothrow_move_assignable_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is noexcept move assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="213" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a8575f9b311104e0e4b5eb06290739782" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllNoexceptMoveAssignable</definition>
        <argsstring></argsstring>
        <name>AllNoexceptMoveAssignable</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_nothrow_move_assignable, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is nothrow move assignable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="218" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ae9b1f248b21752c8848ac124d2465026" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::TriviallyDestructible</definition>
        <argsstring></argsstring>
        <name>TriviallyDestructible</name>
        <initializer>= std::is_trivially_destructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is noexcept destructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="223" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a5ad1afa29b96b6baf32731494337181f" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NoexceptDestructible</definition>
        <argsstring></argsstring>
        <name>NoexceptDestructible</name>
        <initializer>= std::is_nothrow_destructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that T is noexcept destructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="227" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a1b543e2646d0ca9359d5b8b99525caca" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllTriviallyDestructible</definition>
        <argsstring></argsstring>
        <name>AllTriviallyDestructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_trivially_destructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is nothrow destructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="232" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1af4425cd807b1b7933f96f09f9b0c1000" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllNoexceptDestructible</definition>
        <argsstring></argsstring>
        <name>AllNoexceptDestructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_nothrow_destructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput>, is nothrow destructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="238" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a5ec8c4508c34f91de1565b2d2828aec5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Movable</definition>
        <argsstring></argsstring>
        <name>Movable</name>
        <initializer>= <ref refid="namespacehyperion_1_1utils_1_1concepts_1a7a88cbce9b1de2396bb717ea4655d3a2" kindref="member">MoveConstructible</ref>&lt;T&gt; &amp;&amp; <ref refid="namespacehyperion_1_1utils_1_1concepts_1af948fd5f70b36a854fc17a2e90b7ecdb" kindref="member">MoveAssignable</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>std::movable&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="243" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1afe0b54d74b26a747ff1eb1b476ccb12f" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotMovable</definition>
        <argsstring></argsstring>
        <name>NotMovable</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1a5ec8c4508c34f91de1565b2d2828aec5" kindref="member">Movable</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>! std::movable&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="247" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a684eec2ccacc515c034372def542b5ff" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Copyable</definition>
        <argsstring></argsstring>
        <name>Copyable</name>
        <initializer>= <ref refid="namespacehyperion_1_1utils_1_1concepts_1ad412cd7254b59025a0461c3a2c8a597f" kindref="member">CopyConstructible</ref>&lt;T&gt; &amp;&amp; <ref refid="namespacehyperion_1_1utils_1_1concepts_1ab46771039d8fe5bf6f4a513ed8ac5402" kindref="member">CopyAssignable</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>std::copyable&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="251" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1aa7b5719e332f69abe79e1bfe5a74d47e" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotCopyable</definition>
        <argsstring></argsstring>
        <name>NotCopyable</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1a684eec2ccacc515c034372def542b5ff" kindref="member">Copyable</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>! std::copyable&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="255" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1abcf5d3d25ee9443b8daa24b7447c6e51" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::DefaultConstructible</definition>
        <argsstring></argsstring>
        <name>DefaultConstructible</name>
        <initializer>= std::is_default_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that <computeroutput>T</computeroutput> is default constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="259" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a0c0d5dc7388030005d75fe1c9ada41ca" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::TriviallyDefaultConstructible</definition>
        <argsstring></argsstring>
        <name>TriviallyDefaultConstructible</name>
        <initializer>= std::is_trivially_default_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that <computeroutput>T</computeroutput> is trivally default constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="263" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a8251dd91ffd04563c52acb0073fad2f4" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NoexceptDefaultConstructible</definition>
        <argsstring></argsstring>
        <name>NoexceptDefaultConstructible</name>
        <initializer>= std::is_nothrow_default_constructible_v&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that requires that <computeroutput>T</computeroutput> is nothrow default constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="267" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a94efa676cc3368cdbbad4089f029c21c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllDefaultConstructible</definition>
        <argsstring></argsstring>
        <name>AllDefaultConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_default_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput> is default constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="272" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a4e5285dd205c635972de8105b37ba6f5" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllTriviallyDefaultConstructible</definition>
        <argsstring></argsstring>
        <name>AllTriviallyDefaultConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_trivially_default_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput> is trivially default constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="278" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ab1fec7431651d0f645c4660907edb6a8" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename List</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::AllNoexceptDefaultConstructible</definition>
        <argsstring></argsstring>
        <name>AllNoexceptDefaultConstructible</name>
        <initializer>= mpl::for_all_types_v&lt;std::is_nothrow_default_constructible, std::true_type, List&gt;</initializer>
        <briefdescription>
<para>Concept that requires that every type in the <computeroutput>mpl::list</computeroutput>, <computeroutput>List</computeroutput> is nothrow default constructible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="284" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a274c7198ec1352bc74c716a348447bbc" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotDefaultConstructible</definition>
        <argsstring></argsstring>
        <name>NotDefaultConstructible</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1abcf5d3d25ee9443b8daa24b7447c6e51" kindref="member">DefaultConstructible</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>! std::default_initializable&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="289" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a9bc47a198adefd57407e1371015f5136" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::CopyOrMovable</definition>
        <argsstring></argsstring>
        <name>CopyOrMovable</name>
        <initializer>= <ref refid="namespacehyperion_1_1utils_1_1concepts_1a684eec2ccacc515c034372def542b5ff" kindref="member">Copyable</ref>&lt;T&gt; || <ref refid="namespacehyperion_1_1utils_1_1concepts_1a5ec8c4508c34f91de1565b2d2828aec5" kindref="member">Movable</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept requiring T is copyable or movable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="293" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ae0c0c9871c059aaad61821a6e2a65bbc" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotCopyOrMovable</definition>
        <argsstring></argsstring>
        <name>NotCopyOrMovable</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1a9bc47a198adefd57407e1371015f5136" kindref="member">CopyOrMovable</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept requiring T is <bold>NOT</bold> copyable nor movable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="297" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a75fb0989b6ff4faa879cd0666d460dd8" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::Passable</definition>
        <argsstring></argsstring>
        <name>Passable</name>
        <initializer>= <ref refid="namespacehyperion_1_1utils_1_1concepts_1a9bc47a198adefd57407e1371015f5136" kindref="member">CopyOrMovable</ref>&lt;T&gt; || <ref refid="namespacehyperion_1_1utils_1_1concepts_1a9cfdd2078fb05f507be09d79aac2b8e7" kindref="member">Reference</ref>&lt;T&gt; || <ref refid="namespacehyperion_1_1utils_1_1concepts_1ac2ff757814ba72f2415c575a26b42b40" kindref="member">Pointer</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that is the disjunction of most of the requirements for <computeroutput>std::semiregular</computeroutput> Requires that that type be at least one of: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>copyable</para>
</listitem><listitem><para>movable</para>
</listitem><listitem><para>a reference</para>
</listitem><listitem><para>a pointer </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="306" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1ac0b81256fd7e3161981bf881791a9ef1" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotPassable</definition>
        <argsstring></argsstring>
        <name>NotPassable</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1a75fb0989b6ff4faa879cd0666d460dd8" kindref="member">Passable</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Concept that is the negation of <computeroutput>Passable&lt;T&gt;</computeroutput> Requires that the type is <bold>NONE</bold> of: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>copyable</para>
</listitem><listitem><para>movable</para>
</listitem><listitem><para>a reference</para>
</listitem><listitem><para>a pointer </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="315" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a8bd90fe7b21c2f45e61c34a3d5030023" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::SemiRegular</definition>
        <argsstring></argsstring>
        <name>SemiRegular</name>
        <initializer>= std::semiregular&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>std::semiregular&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="319" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehyperion_1_1utils_1_1concepts_1a7301173edb42dcd952c7bd6ac077e1e8" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept hyperion::utils::concepts::NotSemiRegular</definition>
        <argsstring></argsstring>
        <name>NotSemiRegular</name>
        <initializer>= !<ref refid="namespacehyperion_1_1utils_1_1concepts_1a8bd90fe7b21c2f45e61c34a3d5030023" kindref="member">SemiRegular</ref>&lt;T&gt;</initializer>
        <briefdescription>
<para>Alias for <computeroutput>! std::semiregular&lt;T&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="323" column="9" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a small collection of simple Concepts useful for requiring basic attributes of a type. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Concepts.h" line="14" column="1"/>
  </compounddef>
</doxygen>
