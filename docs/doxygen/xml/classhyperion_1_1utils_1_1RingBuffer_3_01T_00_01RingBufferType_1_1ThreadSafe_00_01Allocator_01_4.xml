<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4" kind="class" language="C++" prot="public">
    <compoundname>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</compoundname>
    <includes refid="RingBuffer_8h" local="no">RingBuffer.h</includes>
    <innerclass refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" prot="public">hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::ConstIterator</innerclass>
    <innerclass refid="structhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Element" prot="public">hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::Element</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" prot="public">hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::Iterator</innerclass>
    <innerclass refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1State" prot="private">hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::State</innerclass>
    <templateparamlist>
      <param>
        <type>DefaultConstructible</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>template&lt; typename ElementType &gt; typename</type>
        <declname>Allocator</declname>
        <defname>Allocator</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ab5ac81b53e3ca4ac67157db93a54eac8" prot="public" static="no">
        <type>u32</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::index_type =  u32</definition>
        <argsstring></argsstring>
        <name>index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1208" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a1bfc13f125f79d6eeec543864996c028" prot="public" static="no">
        <type>std::allocator_traits&lt; Allocator&lt; Element &gt; &gt;</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::allocator_traits =  std::allocator_traits&lt;Allocator&lt;Element&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>allocator_traits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1299" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a602f14138e2b083602a71c96bc479e53" prot="public" static="no">
        <type>decltype(allocate_unique&lt; Element[]&gt;(std::declval&lt; Allocator&lt; Element[]&gt; &gt;(), <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a8bad67f9fcdf44d6fc474e78c1fcea62" kindref="member">DEFAULT_CAPACITY</ref>))</type>
        <definition>using hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::unique_pointer =  decltype(allocate_unique&lt;Element[]&gt;(std::declval&lt;Allocator&lt;Element[]&gt; &gt;(), DEFAULT_CAPACITY))</definition>
        <argsstring></argsstring>
        <name>unique_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1300" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1302" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a8bad67f9fcdf44d6fc474e78c1fcea62" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const index_type</type>
        <definition>constexpr const index_type hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::DEFAULT_CAPACITY</definition>
        <argsstring></argsstring>
        <name>DEFAULT_CAPACITY</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>Default capacity of <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1211" column="35" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a6b361634d3759148428d5fa1360c1013" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const u32</type>
        <definition>constexpr const u32 hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::DEFAULT_CAPACITY_INTERNAL</definition>
        <argsstring></argsstring>
        <name>DEFAULT_CAPACITY_INTERNAL</name>
        <initializer>= <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a8bad67f9fcdf44d6fc474e78c1fcea62" kindref="member">DEFAULT_CAPACITY</ref> + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2120" column="28" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1af5426c5e5fbb4e4ebfdb17207c4475be" prot="private" static="no" mutable="no">
        <type>Allocator&lt; Element &gt;</type>
        <definition>Allocator&lt;Element&gt; hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::m_allocator</definition>
        <argsstring></argsstring>
        <name>m_allocator</name>
        <initializer>= Allocator&lt;Element&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2357" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a7334be484317d0b14e07456400a81356" prot="private" static="no" mutable="no">
        <type>unique_pointer</type>
        <definition>unique_pointer hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::m_buffer</definition>
        <argsstring></argsstring>
        <name>m_buffer</name>
        <initializer>= allocate_unique&lt;Element[]&gt;(m_allocator, 
															 DEFAULT_CAPACITY_INTERNAL,
															 m_allocator)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2358" column="16" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a05187a3933a696dc40eac3f7b319e3d5" prot="private" static="no" mutable="no">
        <type>State</type>
        <definition>State hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::m_state</definition>
        <argsstring></argsstring>
        <name>m_state</name>
        <initializer>= State()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2361" column="7" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2361" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a7720035b278f360ebdb142181ab9c6a6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::RingBuffer</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>RingBuffer</name>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> with default capacity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1625" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a9b71815ce3c1b669b6da04a4bec0fb31" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::RingBuffer</definition>
        <argsstring>(index_type intitial_capacity) noexcept</argsstring>
        <name>RingBuffer</name>
        <param>
          <type>index_type</type>
          <declname>intitial_capacity</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> with (at least) the given initial capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intitial_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- The initial capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1630" column="20" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1630" bodyend="1635"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aefee4a7528e5cc16616cae8cc2093dab" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::RingBuffer</definition>
        <argsstring>(index_type intitial_capacity, const T &amp;default_value) noexcept requires Copyable&lt; T &gt;</argsstring>
        <name>RingBuffer</name>
        <param>
          <type>index_type</type>
          <declname>intitial_capacity</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Constructs a new <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> with the given initial capacity and fills it with <computeroutput>default_value</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intitial_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- The initial capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to fill the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1642" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1642" bodyend="1649"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a6f30336a79f592f132a6dc324076cbd3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::RingBuffer</definition>
        <argsstring>(const RingBuffer &amp;buffer) noexcept requires Copyable&lt; T &gt;</argsstring>
        <name>RingBuffer</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1651" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1651" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a85f2f8cda4b78f168e25a344ef7ee73e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::RingBuffer</definition>
        <argsstring>(RingBuffer &amp;&amp;buffer) noexcept</argsstring>
        <name>RingBuffer</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> &amp;&amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1663" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1663" bodyend="1668"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1acc0b9621148c297b06b30fff4972567d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::~RingBuffer</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~RingBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1670" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a5b0f029b166474a3b1a3e4458ae7838e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::at</definition>
        <argsstring>(Integral auto index) noexcept -&gt; Element</argsstring>
        <name>at</name>
        <param>
          <type>Integral auto</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the element at the given index. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not checked in the same manner as STL containers: if index &gt;= capacity, the element at capacity - 1 is returned.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The index of the desired element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element at the given index, or at capacity - 1 if index &gt;= capacity </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1679" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1679" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae861cafd48e38f379f5a100972bc0da6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::front</definition>
        <argsstring>() noexcept -&gt; Element</argsstring>
        <name>front</name>
        <briefdescription>
<para>Returns the first element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1688" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1688" bodyend="1691"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aa5e7da933e23cc8bf7ca6655707a5b08" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::back</definition>
        <argsstring>() noexcept -&gt; Element</argsstring>
        <name>back</name>
        <briefdescription>
<para>Returns the last element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If &lt;= 1 elements are in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, this will be the same as <computeroutput>front</computeroutput></para>
</simplesect>
<simplesect kind="return"><para>The last element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1697" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1697" bodyend="1701"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a783e1d2f8f837f41bf32f9179feffa1e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::data</definition>
        <argsstring>() noexcept -&gt; Element *</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns a pointer to the underlying data in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not sorted in any way to match the representation used by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<simplesect kind="return"><para>A pointer to the underlying data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1707" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1707" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ac775d80d2d5a08d0a8d03aeef6394538" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::empty</definition>
        <argsstring>() const noexcept -&gt; bool</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns whether the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> is empty, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1714" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1714" bodyend="1716"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a8ffbc7e800a8331553431bc48635f287" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::full</definition>
        <argsstring>() const noexcept -&gt; bool</argsstring>
        <name>full</name>
        <briefdescription>
<para>Returns whether the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> is full. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> is full, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1721" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1721" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::size</definition>
        <argsstring>() const noexcept -&gt; index_type</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the current number of elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current number of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1728" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1728" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a40b75399372fab75f4fcf54bb84536e1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::max_size</definition>
        <argsstring>() const noexcept -&gt; index_type</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Returns the maximum possible number of elements this <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> could store if grown to maximum possible capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The maximum possible number of storable elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1736" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1736" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::capacity</definition>
        <argsstring>() const noexcept -&gt; index_type</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Returns the current capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>; the number of elements it can currently store. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current capacity </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1744" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1744" bodyend="1746"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aa2a4073399d73b0af998df5f904e8ade" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::reserve</definition>
        <argsstring>(index_type new_capacity) noexcept -&gt; void</argsstring>
        <name>reserve</name>
        <param>
          <type>index_type</type>
          <declname>new_capacity</declname>
        </param>
        <briefdescription>
<para>Reserves more storage for the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>. If <computeroutput>new_capacity</computeroutput> is &gt; capacity, then the capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> will be extended until at least <computeroutput>new_capacity</computeroutput> elements can be stored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Memory contiguity is maintained, so no <bold>elements</bold> will be lost or invalidated. However, all iterators and references to elements will be invalidated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>- The new capacity of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1755" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1755" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ab776fc83c1a1ebd8458b3ee2aa8972b2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::clear</definition>
        <argsstring>() noexcept -&gt; void</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Erases all elements from the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1771" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1771" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aee5d3570d8a7231b570fc9947be824dd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::push_back</definition>
        <argsstring>(const T &amp;value) noexcept -&gt; void requires Copyable&lt; T &gt;</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> then this loops and overwrites <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae861cafd48e38f379f5a100972bc0da6" kindref="member">front()</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- the element to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1779" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1779" bodyend="1784"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a7b0387f8d5399b9630be449d5b66a738" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::push_back</definition>
        <argsstring>(T &amp;&amp;value) noexcept -&gt; void</argsstring>
        <name>push_back</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> then this loops and overwrites <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae861cafd48e38f379f5a100972bc0da6" kindref="member">front()</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- the element to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1790" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1790" bodyend="1795"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a91a1063a5cf08ccd61b2bf4eb76db50a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::push_back</definition>
        <argsstring>(const Element &amp;element) noexcept -&gt; void</argsstring>
        <name>push_back</name>
        <param>
          <type>const Element &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> then this loops and overwrites <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae861cafd48e38f379f5a100972bc0da6" kindref="member">front()</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- the element to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1801" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1801" bodyend="1806"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1af63194c86fc4e3c3eda86db75ba1ef43" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::push_back</definition>
        <argsstring>(Element &amp;&amp;element) noexcept -&gt; void</argsstring>
        <name>push_back</name>
        <param>
          <type>Element &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> then this loops and overwrites <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae861cafd48e38f379f5a100972bc0da6" kindref="member">front()</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- the element to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1812" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1812" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a930bc968d00b2f4564099a3e2176ab23" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::emplace_back</definition>
        <argsstring>(Args &amp;&amp;... args) noexcept -&gt; Element</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element in place at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> then this loops and overwrites <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae861cafd48e38f379f5a100972bc0da6" kindref="member">front()</ref></computeroutput></para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The types of the element&apos;s constructor arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The constructor arguments for the element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the element constructed at the end of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1827" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1827" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a53fd5d9190bc434c15a8f3c687445c1d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::emplace</definition>
        <argsstring>(const Iterator &amp;position, Args &amp;&amp;... args) noexcept -&gt; Element</argsstring>
        <name>emplace</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element in place at the location indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The types of the element&apos;s constructor arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to construct the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The constructor arguments for the element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the element constructed at the location indicated by <computeroutput>position</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1853" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1853" bodyend="1863"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a9473951fc9cc616868e17eef1f0f90c5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::emplace</definition>
        <argsstring>(const ConstIterator &amp;position, Args &amp;&amp;... args) noexcept -&gt; Element</argsstring>
        <name>emplace</name>
        <param>
          <type>const ConstIterator &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element in place at the location indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The types of the element&apos;s constructor arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to construct the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The constructor arguments for the element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the element constructed at the location indicated by <computeroutput>position</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1876" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1876" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ad1b6ffa4f4bbb8a680a70af5bfd84520" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert</definition>
        <argsstring>(const Iterator &amp;position, const T &amp;element) noexcept -&gt; void requires Copyable&lt; T &gt;</argsstring>
        <name>insert</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Assigns the given element to the position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1895" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1895" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a1795af347cc711c1e03836993d73e13f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert</definition>
        <argsstring>(const Iterator &amp;position, T &amp;&amp;element) noexcept -&gt; void</argsstring>
        <name>insert</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Assigns the given element to the position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1905" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1905" bodyend="1907"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ac32f1e6c4d36d0e3828f8d8b2ce86abd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert</definition>
        <argsstring>(const ConstIterator &amp;position, const T &amp;element) noexcept -&gt; void requires Copyable&lt; T &gt;</argsstring>
        <name>insert</name>
        <param>
          <type>const ConstIterator &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Assigns the given element to the position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1916" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1916" bodyend="1919"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a10e4f7fd542fe3d69fbc9cdbd4432a63" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert</definition>
        <argsstring>(const ConstIterator &amp;position, T &amp;&amp;element) noexcept -&gt; void</argsstring>
        <name>insert</name>
        <param>
          <type>const ConstIterator &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Assigns the given element to the position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1928" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1928" bodyend="1930"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae4b25bdc7230f8cd8cb1b8986f2b1797" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert_emplace</definition>
        <argsstring>(const Iterator &amp;position, Args &amp;&amp;... args) noexcept -&gt; Element</argsstring>
        <name>insert_emplace</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element at the insertion position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments to the constructor for the element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1943" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1943" bodyend="1945"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a4f5db03ea9f9a7580b2942fe5ac01ef2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert_emplace</definition>
        <argsstring>(const ConstIterator &amp;position, Args &amp;&amp;... args) noexcept -&gt; Element</argsstring>
        <name>insert_emplace</name>
        <param>
          <type>const ConstIterator &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element at the insertion position indicated by the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> <computeroutput>position</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1ConstIterator" kindref="compound">ConstIterator</ref></computeroutput> indicating where in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to place the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments to the constructor for the element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1958" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1958" bodyend="1960"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1af8e31bdfe04c7eab72f3a71f258268c9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::erase</definition>
        <argsstring>(const Iterator &amp;position) noexcept -&gt; Iterator</argsstring>
        <name>erase</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Erases the element at the given <computeroutput>position</computeroutput>, moving other elements backward in the buffer to maintain contiguity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to erase</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1968" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1968" bodyend="1970"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a506ae53362f1d4b380c995830a98793c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::erase</definition>
        <argsstring>(const ConstIterator &amp;position) noexcept -&gt; Iterator</argsstring>
        <name>erase</name>
        <param>
          <type>const ConstIterator &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Erases the element at the given <computeroutput>position</computeroutput>, moving other elements backward in the buffer to maintain contiguity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to erase</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1978" column="23" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1978" bodyend="1980"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1abd4cf5bd2ed2015071abb075cb547d47" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::erase</definition>
        <argsstring>(const Iterator &amp;first, const Iterator &amp;last) noexcept -&gt; Iterator</argsstring>
        <name>erase</name>
        <param>
          <type>const Iterator &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Erases the range of elements in [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>) Returns an <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> to the element after the last one erased. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In the case <computeroutput>first</computeroutput> &gt;= <computeroutput>last</computeroutput>, no elements are erased and <computeroutput>last</computeroutput> is returned;</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>- The first element in the range to erase </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>- The last element in the range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the last one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1991" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1991" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aa251bc2ec52d4b027ca65370cea40f75" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::erase</definition>
        <argsstring>(const ConstIterator &amp;first, const ConstIterator &amp;last) noexcept -&gt; Iterator</argsstring>
        <name>erase</name>
        <param>
          <type>const ConstIterator &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const ConstIterator &amp;</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Erases the range of elements in [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>) Returns an <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> to the element after the last one erased. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In the case <computeroutput>first</computeroutput> &gt;= <computeroutput>last</computeroutput>, no elements are erased and <computeroutput>last</computeroutput> is returned;</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>- The first element in the range to erase </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>- The last element in the range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the last one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2008" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2008" bodyend="2014"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a311950c971d83ecb33affde29b3f1ea3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::pop_back</definition>
        <argsstring>() noexcept -&gt; Element</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Removes the last element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2019" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2019" bodyend="2023"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a131b472b618ce1ed656c7154522011e8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::pop_front</definition>
        <argsstring>() noexcept -&gt; Element</argsstring>
        <name>pop_front</name>
        <briefdescription>
<para>Removes the first element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2028" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2028" bodyend="2032"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a149b48da57e072f8e4dc5710637c9d70" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::begin</definition>
        <argsstring>() -&gt; Iterator</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a Random Access Bidirectional iterator over the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, at the beginning. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator, at the beginning </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2038" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2038" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae94ac0c9e57c971a96ee45a48d1c929b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::end</definition>
        <argsstring>() -&gt; Iterator</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a Random Access Bidirectional iterator over the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator, at the end </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2050" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2050" bodyend="2056"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1af3d5c62433a24475104ebf4192bb5444" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::cbegin</definition>
        <argsstring>() -&gt; ConstIterator</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Returns a Random Access Bidirectional read-only iterator over the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, at the beginning. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator, at the beginning </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2062" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2062" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a6cabee8eb78c8b52035a6042d6cb5bb3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::cend</definition>
        <argsstring>() -&gt; ConstIterator</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Returns a Random Access Bidirectional read-only iterator over the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>, at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator, at the end </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2074" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2074" bodyend="2080"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a71e2585352dcb4d9160973b32f68b3d8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::operator[]</definition>
        <argsstring>(Integral auto index) noexcept -&gt; Element</argsstring>
        <name>operator[]</name>
        <param>
          <type>Integral auto</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Unchecked access-by-index operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The index to get the corresponding element for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The element at index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2087" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2087" bodyend="2091"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a42fc32afa354012b201d44ed0709bf61" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::operator=</definition>
        <argsstring>(const RingBuffer &amp;buffer) noexcept -&gt; RingBuffer &amp;requires Copyable&lt; T &gt;</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2094" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2094" bodyend="2109"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a5108565da8674d0518e1f4f88b8efa43" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::operator=</definition>
        <argsstring>(RingBuffer &amp;&amp;buffer) noexcept -&gt; RingBuffer &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref> &amp;&amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2110" column="16" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2110" bodyend="2117"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a3ec5233c0ad46601d35044bd19196586" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert_internal</definition>
        <argsstring>(index_type external_index, const T &amp;elem) noexcept -&gt; void</argsstring>
        <name>insert_internal</name>
        <param>
          <type>index_type</type>
          <declname>external_index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the position indicated by the <computeroutput>external_index</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>external_index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The user-facing index into the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to insert the element at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2371" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2371" bodyend="2398"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a9678e14aa5a7bd8b578955b50051a95a" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert_internal</definition>
        <argsstring>(index_type external_index, T &amp;&amp;elem) noexcept -&gt; void</argsstring>
        <name>insert_internal</name>
        <param>
          <type>index_type</type>
          <declname>external_index</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Inserts the given element at the position indicated by the <computeroutput>external_index</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>external_index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The user-facing index into the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to insert the element at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>- The element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2408" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2408" bodyend="2435"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a9d9ab892cc3dc5ea697c16a9ebb18c86" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>requires constexpr ConstructibleFrom&lt; T, Args... &gt; auto</type>
        <definition>requires constexpr ConstructibleFrom&lt;T, Args...&gt; auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::insert_emplace_internal</definition>
        <argsstring>(index_type external_index, Args &amp;&amp;... args) noexcept -&gt; Element</argsstring>
        <name>insert_emplace_internal</name>
        <param>
          <type>index_type</type>
          <declname>external_index</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the given element at the insertion position indicated by the <computeroutput>external_index</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" kindref="member">size()</ref> == <ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> this drops the last element out of the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>external_index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The user-facing index into the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> to insert the element at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments to the constructor for the element to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2448" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2448" bodyend="2480"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ad4d22a87fe1bcf3fe354fbde434781b7" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::erase_internal</definition>
        <argsstring>(index_type external_index) noexcept -&gt; Iterator</argsstring>
        <name>erase_internal</name>
        <param>
          <type>index_type</type>
          <declname>external_index</declname>
        </param>
        <briefdescription>
<para>Erases the element at the given index, returning an <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> to the element after the removed one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>external_index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The index to the element to remove. This should be a <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> index: IE, not an interal one into the <computeroutput>T</computeroutput> array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the one removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2490" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2490" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aa58113430893e2de559c543026eaa0f4" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;::erase_internal</definition>
        <argsstring>(index_type first, index_type last) noexcept -&gt; Iterator</argsstring>
        <name>erase_internal</name>
        <param>
          <type>index_type</type>
          <declname>first</declname>
        </param>
        <param>
          <type>index_type</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Erases the range of elements in [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>) Returns an <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> to the element after the last one erased. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>- The first index in the range to erase. This should be a <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> index: IE, not an internal one into the <computeroutput>T</computeroutput> array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>- The last index<computeroutput>in the range to erase. This should be a</computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref><computeroutput> index: IE, not an internal one into the</computeroutput>T` array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1_1Iterator" kindref="compound">Iterator</ref></computeroutput> pointing to the element after the last one erased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="2524" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="2524" bodyend="2562"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A simple Ring Buffer implementation. Supports resizing, writing, reading, erasing, and provides mutable and immutable random access iterators. </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1autotoc_md8">
<title>Iterator Invalidation</title>
<para><itemizedlist>
<listitem><para>Iterators are lazily evaluated, so will only ever be invalidated at their current state. Performing any mutating operation (mutating the iterator, not the underlying data) on them will re-sync them with their associated <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>. The following operations will invalidate an iterator&apos;s current state:</para>
</listitem><listitem><para>Read-only operations: never</para>
</listitem><listitem><para>clear: always</para>
</listitem><listitem><para>reserve: only if the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput> changed capacity</para>
</listitem><listitem><para>erase: Erased elements and all following elements</para>
</listitem><listitem><para>push_back, emplace_back: only <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae94ac0c9e57c971a96ee45a48d1c929b" kindref="member">end()</ref></computeroutput> until <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" kindref="member">capacity()</ref></computeroutput> is reached, then <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a149b48da57e072f8e4dc5710637c9d70" kindref="member">begin()</ref></computeroutput> and <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae94ac0c9e57c971a96ee45a48d1c929b" kindref="member">end()</ref></computeroutput></para>
</listitem><listitem><para>insert, emplace: only the element at the position inserted/emplaced</para>
</listitem><listitem><para>pop_back: the element removed and <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae94ac0c9e57c971a96ee45a48d1c929b" kindref="member">end()</ref></computeroutput></para>
</listitem><listitem><para>pop_front: the element removed and <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a149b48da57e072f8e4dc5710637c9d70" kindref="member">begin()</ref></computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- The type to store in the <computeroutput><ref refid="classhyperion_1_1utils_1_1RingBuffer" kindref="compound">RingBuffer</ref></computeroutput>. Must Be Default Constructible. Does not currently support <computeroutput>T</computeroutput> of array types (eg, <computeroutput>T</computeroutput> = <computeroutput>U[]</computeroutput> or <computeroutput>T</computeroutput> = <computeroutput>U[N]</computeroutput>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect1>
    </detaileddescription>
    <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" line="1206" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/RingBuffer.h" bodystart="1206" bodyend="2563"/>
    <listofallmembers>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a1bfc13f125f79d6eeec543864996c028" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>allocator_traits</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a5b0f029b166474a3b1a3e4458ae7838e" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>at</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aa5e7da933e23cc8bf7ca6655707a5b08" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a149b48da57e072f8e4dc5710637c9d70" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>begin</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aecd1607ff19990b5b34dca3b9dd62eb1" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>capacity</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1af3d5c62433a24475104ebf4192bb5444" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>cbegin</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a6cabee8eb78c8b52035a6042d6cb5bb3" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>cend</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ab776fc83c1a1ebd8458b3ee2aa8972b2" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>clear</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a783e1d2f8f837f41bf32f9179feffa1e" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>data</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a8bad67f9fcdf44d6fc474e78c1fcea62" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>DEFAULT_CAPACITY</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a6b361634d3759148428d5fa1360c1013" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>DEFAULT_CAPACITY_INTERNAL</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a53fd5d9190bc434c15a8f3c687445c1d" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>emplace</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a9473951fc9cc616868e17eef1f0f90c5" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>emplace</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a930bc968d00b2f4564099a3e2176ab23" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>emplace_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ac775d80d2d5a08d0a8d03aeef6394538" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>empty</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae94ac0c9e57c971a96ee45a48d1c929b" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>end</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1af8e31bdfe04c7eab72f3a71f258268c9" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>erase</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a506ae53362f1d4b380c995830a98793c" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>erase</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1abd4cf5bd2ed2015071abb075cb547d47" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>erase</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aa251bc2ec52d4b027ca65370cea40f75" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>erase</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ad4d22a87fe1bcf3fe354fbde434781b7" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>erase_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aa58113430893e2de559c543026eaa0f4" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>erase_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae861cafd48e38f379f5a100972bc0da6" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>front</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a8ffbc7e800a8331553431bc48635f287" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>full</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ab5ac81b53e3ca4ac67157db93a54eac8" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>index_type</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ad1b6ffa4f4bbb8a680a70af5bfd84520" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a1795af347cc711c1e03836993d73e13f" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ac32f1e6c4d36d0e3828f8d8b2ce86abd" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a10e4f7fd542fe3d69fbc9cdbd4432a63" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1ae4b25bdc7230f8cd8cb1b8986f2b1797" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert_emplace</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a4f5db03ea9f9a7580b2942fe5ac01ef2" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert_emplace</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a9d9ab892cc3dc5ea697c16a9ebb18c86" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert_emplace_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a3ec5233c0ad46601d35044bd19196586" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a9678e14aa5a7bd8b578955b50051a95a" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>insert_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1af5426c5e5fbb4e4ebfdb17207c4475be" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>m_allocator</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a7334be484317d0b14e07456400a81356" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>m_buffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a05187a3933a696dc40eac3f7b319e3d5" prot="private" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>m_state</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a40b75399372fab75f4fcf54bb84536e1" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>max_size</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a42fc32afa354012b201d44ed0709bf61" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a5108565da8674d0518e1f4f88b8efa43" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a71e2585352dcb4d9160973b32f68b3d8" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>operator[]</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a311950c971d83ecb33affde29b3f1ea3" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>pop_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a131b472b618ce1ed656c7154522011e8" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>pop_front</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aee5d3570d8a7231b570fc9947be824dd" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>push_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a7b0387f8d5399b9630be449d5b66a738" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>push_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a91a1063a5cf08ccd61b2bf4eb76db50a" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>push_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1af63194c86fc4e3c3eda86db75ba1ef43" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>push_back</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aa2a4073399d73b0af998df5f904e8ade" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>reserve</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a7720035b278f360ebdb142181ab9c6a6" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a9b71815ce3c1b669b6da04a4bec0fb31" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1aefee4a7528e5cc16616cae8cc2093dab" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a6f30336a79f592f132a6dc324076cbd3" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a85f2f8cda4b78f168e25a344ef7ee73e" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>RingBuffer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a2a5f1dff16eb89671112b69657d9f46e" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>size</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1a602f14138e2b083602a71c96bc479e53" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>unique_pointer</name></member>
      <member refid="classhyperion_1_1utils_1_1RingBuffer_3_01T_00_01RingBufferType_1_1ThreadSafe_00_01Allocator_01_4_1acc0b9621148c297b06b30fff4972567d" prot="public" virt="non-virtual"><scope>hyperion::utils::RingBuffer&lt; T, RingBufferType::ThreadSafe, Allocator &gt;</scope><name>~RingBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
