<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classhyperion_1_1utils_1_1Span" kind="class" language="C++" prot="public">
    <compoundname>hyperion::utils::Span</compoundname>
    <includes refid="Span_8h" local="no">Span.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>usize</type>
        <declname>Size</declname>
        <defname>Size</defname>
        <defval>gsl::dynamic_extent</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1Span_1a0f56c5d6c105b4001afc1eb4514672cb" prot="public" static="no">
        <type>typename gsl::span&lt; T, Size &gt;::iterator</type>
        <definition>using hyperion::utils::Span&lt; T, Size &gt;::Iterator =  typename gsl::span&lt;T, Size&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="23" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1Span_1a452f751f2af34086da3d37d7ea3e1f9e" prot="public" static="no">
        <type>typename gsl::span&lt; T, Size &gt;::reverse_iterator</type>
        <definition>using hyperion::utils::Span&lt; T, Size &gt;::ReverseIterator =  typename gsl::span&lt;T, Size&gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>ReverseIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="24" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhyperion_1_1utils_1_1Span_1a05b9c7a9ca0874ed9ef1305d45a15dd7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>Offset</declname>
            <defname>Offset</defname>
          </param>
          <param>
            <type>usize</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type>typename gsl::details::calculate_subspan_type&lt; T, Size, Offset, Count &gt;::type</type>
        <definition>using hyperion::utils::Span&lt; T, Size &gt;::SubSpan =  typename gsl::details::calculate_subspan_type&lt;T, Size, Offset, Count&gt;::type</definition>
        <argsstring></argsstring>
        <name>SubSpan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="26" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhyperion_1_1utils_1_1Span_1a01799fbbffed6e7a800bb80e53c9690c" prot="private" static="no" mutable="no">
        <type>gsl::span&lt; T, Size &gt;</type>
        <definition>gsl::span&lt;T, Size&gt; hyperion::utils::Span&lt; T, Size &gt;::m_span_internal</definition>
        <argsstring></argsstring>
        <name>m_span_internal</name>
        <initializer>= gsl::span&lt;T, Size&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="257" column="11" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a289ed5ef3cfc567c92523c8447bb26fa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Span&lt; T, Size &gt;::Span</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a31ce2c951be95faa26c2dcb12a92274f" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::Span&lt; T, Size &gt;::Span</definition>
        <argsstring>(gsl::span&lt; T, Size &gt; span) noexcept</argsstring>
        <name>Span</name>
        <param>
          <type>gsl::span&lt; T, Size &gt;</type>
          <declname>span</declname>
        </param>
        <briefdescription>
<para>Constructs a <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> from a <computeroutput>gsl::span</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>span</parametername>
</parameternamelist>
<parameterdescription>
<para>- The <computeroutput>gsl::span</computeroutput> to wrap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="33" column="20" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="33" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1aa000409ebf1c3ac33e37454af029efef" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::Span&lt; T, Size &gt;::Span</definition>
        <argsstring>(const Span&lt; T, Size &gt; &amp;span) noexcept=default</argsstring>
        <name>Span</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref>&lt; T, Size &gt; &amp;</type>
          <declname>span</declname>
        </param>
        <briefdescription>
<para>Copy constructs a <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> from the given one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>span</parametername>
</parameternamelist>
<parameterdescription>
<para>- The <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="39" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a1ad6db7b82a2355ecedeea6ec58a087d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hyperion::utils::Span&lt; T, Size &gt;::Span</definition>
        <argsstring>(Span&lt; T, Size &gt; &amp;&amp;span) noexcept=default</argsstring>
        <name>Span</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref>&lt; T, Size &gt; &amp;&amp;</type>
          <declname>span</declname>
        </param>
        <briefdescription>
<para>Move constructs the given <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>span</parametername>
</parameternamelist>
<parameterdescription>
<para>- The <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> to move </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="44" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a4094b131e08ac9ebe971ce4e677b639d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>hyperion::utils::Span&lt; T, Size &gt;::~Span</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~Span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1ae1bc08c6958bfed7f4847468152267aa" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::at</definition>
        <argsstring>(usize index) noexcept -&gt; T &amp;</argsstring>
        <name>at</name>
        <param>
          <type>usize</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the element at the given <computeroutput>index</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- The index of the desired element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The element at <computeroutput>index</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="51" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a5a8f6a35d5e444448193ddfd2df5e865" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>usize</type>
            <declname>size</declname>
            <defname>size</defname>
            <defval>Size</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hyperion::utils::Span&lt; T, Size &gt;::requires</definition>
        <argsstring>(size !=gsl::dynamic_extent) const expr inline auto first() const noexcept -&gt; Span&lt; T, Count &gt;</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Span_1a9ce8caa3da425e6bc16ea71b0693b269" kindref="member">size</ref> !</type>
          <defval>gsl::dynamic_extent</defval>
        </param>
        <briefdescription>
<para>Returns the first <computeroutput>Count</computeroutput> elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Count</parametername>
</parameternamelist>
<parameterdescription>
<para>- The number of elements to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- The size of the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput>, this should always be left defaulted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The first <computeroutput>Count</computeroutput> elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput>, as a <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="61" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a1ff318b453facf13b4a3ff7c9ca65f16" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>size</declname>
            <defname>size</defname>
            <defval>Size</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hyperion::utils::Span&lt; T, Size &gt;::requires</definition>
        <argsstring>(size==gsl::dynamic_extent) const expr inline auto first(usize count) const noexcept -&gt; Span&lt; T, Size &gt;</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Span_1a9ce8caa3da425e6bc16ea71b0693b269" kindref="member">size</ref></type>
          <defval>=gsl::dynamic_extent</defval>
        </param>
        <briefdescription>
<para>Returns the first <computeroutput>count</computeroutput> elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- The size of the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput>, this should always be left defaulted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>- The number of elements to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The first <computeroutput>count</computeroutput> elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput>, as a <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="72" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1acd503d4a5b59fb93d70187baa756a148" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>usize</type>
            <declname>size</declname>
            <defname>size</defname>
            <defval>Size</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hyperion::utils::Span&lt; T, Size &gt;::requires</definition>
        <argsstring>(size !=gsl::dynamic_extent) const expr inline auto last() const noexcept -&gt; Span&lt; T, Count &gt;</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Span_1a9ce8caa3da425e6bc16ea71b0693b269" kindref="member">size</ref> !</type>
          <defval>gsl::dynamic_extent</defval>
        </param>
        <briefdescription>
<para>Returns the last <computeroutput>Count</computeroutput> elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Count</parametername>
</parameternamelist>
<parameterdescription>
<para>- The number of elements to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- The size of the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput>, this should always be left defaulted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The last <computeroutput>Count</computeroutput> elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput>, as a <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="83" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1af1e37ee5f56be222e4757a288607f692" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>size</declname>
            <defname>size</defname>
            <defval>Size</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hyperion::utils::Span&lt; T, Size &gt;::requires</definition>
        <argsstring>(size==gsl::dynamic_extent) const expr inline auto last(usize count) const noexcept -&gt; Span&lt; T, Size &gt;</argsstring>
        <name>requires</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Span_1a9ce8caa3da425e6bc16ea71b0693b269" kindref="member">size</ref></type>
          <defval>=gsl::dynamic_extent</defval>
        </param>
        <briefdescription>
<para>Returns the last <computeroutput>count</computeroutput> elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- The size of the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput>, this should always be left defaulted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>- The number of elements to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The last <computeroutput>count</computeroutput> elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> as a <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="94" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a45c13501448cca5bffcee4b48393b2e5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>Offset</declname>
            <defname>Offset</defname>
          </param>
          <param>
            <type>usize</type>
            <declname>Count</declname>
            <defname>Count</defname>
            <defval>gsl::dynamic_extent</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::subspan</definition>
        <argsstring>() const noexcept -&gt; SubSpan&lt; Offset, Count &gt;</argsstring>
        <name>subspan</name>
        <briefdescription>
<para>Returns a subspan starting at the given <computeroutput>Offset</computeroutput> with <computeroutput>Count</computeroutput> elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Offset</parametername>
</parameternamelist>
<parameterdescription>
<para>- The offset to start the subspan at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Count</parametername>
</parameternamelist>
<parameterdescription>
<para>- The number of elements to get in the subspan </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The subspan starting at <computeroutput>Offset</computeroutput> of size <computeroutput>Count</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="105" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a5d835d79b8bb5e090da737467416ab79" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::subspan</definition>
        <argsstring>(usize offset, usize count=gsl::dynamic_extent) const noexcept -&gt; Span&lt; T, gsl::dynamic_extent &gt;</argsstring>
        <name>subspan</name>
        <param>
          <type>usize</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>usize</type>
          <declname>count</declname>
          <defval>gsl::dynamic_extent</defval>
        </param>
        <briefdescription>
<para>Returns a subspan starting at the given <computeroutput>offset</computeroutput> with <computeroutput>count</computeroutput> elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>- The offset to start the subspan at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>- The number of elements to get in the subspan </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- The subspan starting at <computeroutput>offset</computeroutput> of size <computeroutput>count</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="115" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a9ce8caa3da425e6bc16ea71b0693b269" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::size</definition>
        <argsstring>() const noexcept -&gt; usize</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the number of elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- The number of elements in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="123" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a39937745cc84fd4c9edcc818d9c1686f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::size_bytes</definition>
        <argsstring>() const noexcept -&gt; usize</argsstring>
        <name>size_bytes</name>
        <briefdescription>
<para>Returns the size of the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- The size of the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="130" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a9908691b0eccf6dfde7ad9d2145eb064" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::is_empty</definition>
        <argsstring>() const noexcept -&gt; bool</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>Returns whether the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- If the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> is empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="137" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a319849c122e35bc7e8a72cd38089dfe8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::data</definition>
        <argsstring>() const noexcept -&gt; T *</argsstring>
        <name>data</name>
        <briefdescription>
<para>A pointer to the data contained in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- A pointer to the data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="144" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a0e3a951c31d459100bf3e73700eabf39" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::front</definition>
        <argsstring>() const noexcept -&gt; T &amp;</argsstring>
        <name>front</name>
        <briefdescription>
<para>Returns the first element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- The first element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="151" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1ae295bfd6467f6ad1535db9f0e021cf63" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::back</definition>
        <argsstring>() const noexcept -&gt; T &amp;</argsstring>
        <name>back</name>
        <briefdescription>
<para>Returns the last element in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- The last element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="158" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1affd73be0f3a9287d81838ef6b83cce93" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::begin</definition>
        <argsstring>() noexcept -&gt; Iterator</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="162" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a3c720a037264de78a9516003c99894cc" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::begin</definition>
        <argsstring>() const noexcept -&gt; Iterator</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="166" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a99f020b2543fbfa5ae0a093815815a66" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::end</definition>
        <argsstring>() noexcept -&gt; Iterator</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="170" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1aff4e4e66c9f4122cfcf12a0731add15a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::end</definition>
        <argsstring>() const noexcept -&gt; Iterator</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="174" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a6a32e96bd41d2556dbd6904a849b9d10" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::rbegin</definition>
        <argsstring>() noexcept -&gt; ReverseIterator</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="178" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1aee33d099ddccfea2ddad9dc67cb27626" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::rbegin</definition>
        <argsstring>() const noexcept -&gt; ReverseIterator</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="182" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a7c24d1d7a92716942ada155b62c71d68" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::rend</definition>
        <argsstring>() noexcept -&gt; ReverseIterator</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="186" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a2ce5a892879df5f72b4bc897e0277486" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::rend</definition>
        <argsstring>() const noexcept -&gt; ReverseIterator</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="190" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a23bd47d36697b7911e717c5d73074742" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::operator[]</definition>
        <argsstring>(usize index) noexcept -&gt; T &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>usize</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="249" column="24" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1ab942316661a3d5a546edeb26ae98fa44" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::operator=</definition>
        <argsstring>(const Span&lt; T, Size &gt; &amp;span) noexcept -&gt; Span&lt; T, Size &gt; &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref>&lt; T, Size &gt; &amp;</type>
          <declname>span</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="253" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a5ec35737e2164ceae33957f36adf74d9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto hyperion::utils::Span&lt; T, Size &gt;::operator=</definition>
        <argsstring>(Span&lt; T, Size &gt; &amp;&amp;span) noexcept -&gt; Span&lt; T, Size &gt; &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref>&lt; T, Size &gt; &amp;&amp;</type>
          <declname>span</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="254" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a8026ab02bce4d0957e9af42e397ab8a8" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr static auto</type>
        <definition>constexpr static auto hyperion::utils::Span&lt; T, Size &gt;::make_span</definition>
        <argsstring>(T *ptr, typename gsl::span&lt; T &gt;::usizeype size) noexcept -&gt; Span&lt; T &gt;</argsstring>
        <name>make_span</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>typename gsl::span&lt; T &gt;::usizeype</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="205" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a121ca5b1d8487cf9b21bdb5d596168b2" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr static auto</type>
        <definition>constexpr static auto hyperion::utils::Span&lt; T, Size &gt;::make_span</definition>
        <argsstring>(T *first, T *last) noexcept -&gt; Span&lt; T &gt;</argsstring>
        <name>make_span</name>
        <param>
          <type>T *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="210" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1ac0248af999d5883f329ac3ec04902776" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>usize</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type>constexpr static auto</type>
        <definition>constexpr static auto hyperion::utils::Span&lt; T, Size &gt;::make_span</definition>
        <argsstring>(T(&amp;array)[Count]) noexcept -&gt; Span&lt; T, Count &gt;</argsstring>
        <name>make_span</name>
        <param>
          <type>T(&amp;)</type>
          <declname>array</declname>
          <array>[Count]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="216" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1ae9349049b48447e2c7af3f5aaf1dd58b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>constexpr static auto</type>
        <definition>constexpr static auto hyperion::utils::Span&lt; T, Size &gt;::make_span</definition>
        <argsstring>(Container &amp;container) noexcept -&gt; Span&lt; typename Container::value_type &gt;</argsstring>
        <name>make_span</name>
        <param>
          <type>Container &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="222" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a32bb8e8e5ec16e775a7d3da142b5585e" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>constexpr static auto</type>
        <definition>constexpr static auto hyperion::utils::Span&lt; T, Size &gt;::make_span</definition>
        <argsstring>(const Container &amp;container) noexcept -&gt; Span&lt; const typename Container::value_type &gt;</argsstring>
        <name>make_span</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="227" column="31" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a019349c6608aa97479cabd6e95266d3c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tptr</type>
          </param>
        </templateparamlist>
        <type>constexpr static auto</type>
        <definition>constexpr static auto hyperion::utils::Span&lt; T, Size &gt;::make_span</definition>
        <argsstring>(Tptr &amp;container, usize size) noexcept -&gt; Span&lt; typename Tptr::element_type &gt;</argsstring>
        <name>make_span</name>
        <param>
          <type>Tptr &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>usize</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="234" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a537abe08db47ff04f7f93915ebbabe79" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tptr</type>
          </param>
        </templateparamlist>
        <type>constexpr static auto</type>
        <definition>constexpr static auto hyperion::utils::Span&lt; T, Size &gt;::make_span</definition>
        <argsstring>(Tptr &amp;container) noexcept -&gt; Span&lt; typename Tptr::element_type &gt;</argsstring>
        <name>make_span</name>
        <param>
          <type>Tptr &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="240" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classhyperion_1_1utils_1_1Span_1a87d3c4caa3cbaf9bb66363eebfa1d447" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr static auto</type>
        <definition>constexpr static auto hyperion::utils::Span&lt; T, Size &gt;::make_span</definition>
        <argsstring>(std::array&lt; T, Size &gt; array) noexcept -&gt; Span&lt; T, Size &gt;</argsstring>
        <name>make_span</name>
        <param>
          <type>std::array&lt; T, Size &gt;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="245" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="245" bodyend="247"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Thin wrapper around <computeroutput>gsl::span</computeroutput> </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- The type contained in the <computeroutput><ref refid="classhyperion_1_1utils_1_1Span" kindref="compound">Span</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Size</parametername>
</parameternamelist>
<parameterdescription>
<para>- The number of elements for constexpr sizes, or gsl::dynamic_extent (default) for run-time sizes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" line="21" column="1" bodyfile="/home/braxton/git/Hyperion/utils/include/HyperionUtils/Span.h" bodystart="21" bodyend="258"/>
    <listofallmembers>
      <member refid="classhyperion_1_1utils_1_1Span_1ae1bc08c6958bfed7f4847468152267aa" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>at</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1ae295bfd6467f6ad1535db9f0e021cf63" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>back</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1affd73be0f3a9287d81838ef6b83cce93" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>begin</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a3c720a037264de78a9516003c99894cc" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>begin</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a319849c122e35bc7e8a72cd38089dfe8" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>data</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a99f020b2543fbfa5ae0a093815815a66" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>end</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1aff4e4e66c9f4122cfcf12a0731add15a" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>end</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a0e3a951c31d459100bf3e73700eabf39" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>front</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a9908691b0eccf6dfde7ad9d2145eb064" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>is_empty</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a0f56c5d6c105b4001afc1eb4514672cb" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>Iterator</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a01799fbbffed6e7a800bb80e53c9690c" prot="private" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>m_span_internal</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a8026ab02bce4d0957e9af42e397ab8a8" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>make_span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a121ca5b1d8487cf9b21bdb5d596168b2" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>make_span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1ac0248af999d5883f329ac3ec04902776" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>make_span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1ae9349049b48447e2c7af3f5aaf1dd58b" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>make_span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a32bb8e8e5ec16e775a7d3da142b5585e" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>make_span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a019349c6608aa97479cabd6e95266d3c" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>make_span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a537abe08db47ff04f7f93915ebbabe79" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>make_span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a87d3c4caa3cbaf9bb66363eebfa1d447" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>make_span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1ab942316661a3d5a546edeb26ae98fa44" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a5ec35737e2164ceae33957f36adf74d9" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>operator=</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a23bd47d36697b7911e717c5d73074742" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>operator[]</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a6a32e96bd41d2556dbd6904a849b9d10" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>rbegin</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1aee33d099ddccfea2ddad9dc67cb27626" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>rbegin</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a7c24d1d7a92716942ada155b62c71d68" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>rend</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a2ce5a892879df5f72b4bc897e0277486" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>rend</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a5a8f6a35d5e444448193ddfd2df5e865" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>requires</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a1ff318b453facf13b4a3ff7c9ca65f16" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>requires</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1acd503d4a5b59fb93d70187baa756a148" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>requires</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1af1e37ee5f56be222e4757a288607f692" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>requires</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a452f751f2af34086da3d37d7ea3e1f9e" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>ReverseIterator</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a9ce8caa3da425e6bc16ea71b0693b269" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>size</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a39937745cc84fd4c9edcc818d9c1686f" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>size_bytes</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a289ed5ef3cfc567c92523c8447bb26fa" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>Span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a31ce2c951be95faa26c2dcb12a92274f" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>Span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1aa000409ebf1c3ac33e37454af029efef" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>Span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a1ad6db7b82a2355ecedeea6ec58a087d" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>Span</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a05b9c7a9ca0874ed9ef1305d45a15dd7" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>SubSpan</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a45c13501448cca5bffcee4b48393b2e5" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>subspan</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a5d835d79b8bb5e090da737467416ab79" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>subspan</name></member>
      <member refid="classhyperion_1_1utils_1_1Span_1a4094b131e08ac9ebe971ce4e677b639d" prot="public" virt="non-virtual"><scope>hyperion::utils::Span</scope><name>~Span</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
